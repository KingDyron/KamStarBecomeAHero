{$EVENT evtTick:OnTickHero}
{$EVENT evtUnitWounded:OnUnitWoundedHero}
{$EVENT evtUnitAttacked:OnUnitAttackedHero}
{$EVENT evtMissionStart:OnMissionStartHero}
{$EVENT evtHouseDamaged:OnHouseDamagedHero}


Procedure ChangeInventoryItem(aIndex : Integer);
begin
	If high(HeroInventory[aIndex]) = 0 then
		Exit;
		
	SlotID[aIndex] := SlotID[aIndex] + 1;
	
	//If not U.ArrayHasElementI(aIndex, [0,1,7]) then 
	//	If SlotID[aIndex] >= length(HeroInventory[aIndex]) then
	//		SlotID[aIndex] := 1;
			
	//If U.ArrayHasElementI(aIndex, [0,1,7]) then 
		If SlotID[aIndex] >= length(HeroInventory[aIndex]) then
			SlotID[aIndex] := 0;
		
	SetInventoryStats(aIndex);
end;



Procedure OnUnitWoundedHero(aUnit,aKiller:Integer);
var Random : Integer;
begin	
	If aUnit = Hero then 
	begin
		case States.UnitType(aKiller) of 
			13 : Random := 130;
			14 : Random := 45;
			15 : Random := 75;
			16 : Random := 85;
			17 : Random := 70;
			18 : Random := 75;
			19 : Random := 75;
			20 : Random := 80;
			21 : Random := 78;
			22 : Random := 85;
			23 : Random := 90;
			24 : Random := 40;
			25 : Random := 30;
			26 : Random := 100;
			27 : Random := 50;
		end;
		If HeroStats[0].Health>0 then 
			If U.RandomRangeI(1,Random)> HeroStats[0].Defense then 
			begin
				Actions.UnitHpSetInvulnerable(Hero,true);
				If not HeroImmortal then
					case States.UnitType(aKiller) of
						13:HeroStats[0].Health:=HeroStats[0].Health-30;
						14,24,25,27,17,15:HeroStats[0].Health:=HeroStats[0].Health-1;
						19,18,21:HeroStats[0].Health:=HeroStats[0].Health-2;
						16,20,22:HeroStats[0].Health:=HeroStats[0].Health-3;
						23,26:HeroStats[0].Health:=HeroStats[0].Health-4;
					end;
				If HeroStats[0].Health	<= 0 then HeroStats[0].Health:=0;		
			end;
		If HeroStats[0].Health<=0 then 
		begin
			Actions.UnitHpSetInvulnerable(Hero,false);
			Actions.UnitKill(Hero,false);
		end;	
	end;
end;

Procedure OnUnitAttackedHero(aUnit,aKiller:Integer);
var Random : Integer;
begin
	If aKiller = Hero then
		if States.GameTime > aHeroAttackTime then 
		begin
			case States.UnitType(aUnit) of 
				14 : Random := 45;
				15 : Random := 75;
				16 : Random := 85;
				17 : Random := 65;
				18 : Random := 80;
				19 : Random := 80;
				20 : Random := 90;
				21 : Random := 78;
				22 : Random := 100;
				23 : Random := 100;
				24 : Random := 40;
				25 : Random := 30;
				26 : Random := 100;
				27 : Random := 50;
			end;
			If S.KaMRandomI(Random) >= Random - HeroStats[0].Attack then 
			begin
				aHeroAttackTime := States.GameTime + HeroStats[0].Haste;
				A.UnitKill(aUnit,false);
			end;
			//Actions.UnitHpChange(aUnit,-Attack);		
		end;
end;


Procedure OnHouseDamagedHero(aHouse,aKiller:Integer);
var aOwner : Integer;
begin
	aOwner := States.UnitOwner(aKiller);
	If aOwner > -1 then 
		If InstantKill[aOwner] then 
			A.HouseDestroy(aHouse,false);
		
	If aKiller = Hero then Actions.HouseAddDamage(aHouse,HeroStats[0].Attack div 3);
end;

Procedure OnTickHero;
begin
	If States.GameTime mod 5 = 0 then ShowHeroStats;
	
	If States.GameTime mod 15 = 0 then 
		If not(States.UnitDead(Hero))
			and(States.UnitIdle(Hero)) then
				If (HeroStats[0].Health<HPmax) and (HeroStats[0].Health>0) then
				begin
					HeroStats[0].Health:=HeroStats[0].Health+1+HeroSpecialReg;
					If HeroStats[0].Health > HPmax then 
						HeroStats[0].Health := HPmax;
				end;
	If States.GameTime mod 15 = 0 then 
		If not(States.UnitDead(Hero))
			and not (States.UnitIdle(Hero)) then
					HeroSpecialPoints := HeroSpecialPoints + 1;
					
	If HeroSpecialPoints = 150 then 
	begin
		HeroSpecialPoints := 0;
		//HeroStats[0].MultiHealth := HeroStats[0].MultiHealth - HeroSpecialHPPoints;
		HeroSpecialHPPoints := HeroSpecialHPPoints + 1;
		SetInventoryStats(-1);
	end;
	
	If not AncientFound[0] then
		If aHeroPos = Point(50,129) then
		begin
			
			GiveItemFromID(10);
			A.ShowMSG(0, 'You found The Ancient Sword. Good job!');
			AncientFound[0] := not AncientFound[0];
		end;
	
	If not AncientFound[1] then		
		If aHeroPos = Point(255,78) then
		begin
			GiveItemFromID(11);
			A.ShowMSG(0, 'You found The Ancient Shield. Good job!');
			AncientFound[1] := not AncientFound[1];
		end;
		
	If not AncientFound[2] then
		If aHeroPos = Point(126,93) then
		begin
			GiveItemFromID(12);
			A.ShowMSG(0, 'You found The Ancient Helmet. Good job!');
			AncientFound[2] := not AncientFound[2];
		end;
	If not AncientFound[3] then 
		If aHeroPos = Point(228,2) then
		begin
			GiveItemFromID(13);
			A.ShowMSG(0, 'You found The Ancient Chestplate. Good job!');
			AncientFound[3] := not AncientFound[3];
		end;
	If not AncientFound[4] then 
		If aHeroPos = Point(190,31) then
		begin
			GiveItemFromID(14);
			A.ShowMSG(0, 'You found The Ancient Leggings. Good job!');
			AncientFound[4] := not AncientFound[4];
		end;
	If not AncientFound[5] then 
		If aHeroPos = Point(119,241) then
		begin
			GiveItemFromID(15);
			A.ShowMSG(0, 'You found The Ancient Boots. Good job!');
			AncientFound[5] := not AncientFound[5];
		end;
	//Hero Bonuses - sakwa
	If States.GameTime mod 9000 = 0 then
	begin
		If aItem[4].ID = 46 then 
		begin
			If GetItemIndex(51,HeroInventory[6]) <> -1 then 
				A.GiveWares(0,0,10);
			If GetItemIndex(52,HeroInventory[6]) <> -1 then 
				A.GiveWares(0,5,10);
			If GetItemIndex(53,HeroInventory[6]) <> -1 then 
				A.GiveWares(0,1,10);
			If GetItemIndex(54,HeroInventory[6]) <> -1 then 
				A.GiveWares(0,4,10);
		end else 
		begin
			If aItem[6].ID = 51 then 
				A.GiveWares(0,0,10);
			If aItem[6].ID = 52 then 
				A.GiveWares(0,5,10);
			If aItem[6].ID = 53 then 
				A.GiveWares(0,1,10);
			If aItem[6].ID = 54 then 
				A.GiveWares(0,4,10);		
		end;
	end;
end;



Procedure OnMissionStartHero;
begin
	HeroStats[0].Health:=50 + HeroStats[0].Health + HeroSpecialHPPoints;	
	
	GiveItemFromID(0);
	GiveItemFromID(1);
	GiveItemFromID(2);
	GiveItemFromID(3);
	GiveItemFromID(4);
	GiveItemFromID(5);
	GiveItemFromID(6);
	GiveItemFromID(7);
	GiveItemFromID(8);
	GiveItemFromID(9);
end;