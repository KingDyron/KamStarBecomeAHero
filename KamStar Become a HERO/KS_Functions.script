{$EVENT evtTick:OnTickFunction}
{$EVENT evtMissionStart:OnMissionStartSetAllItems}
procedure OnTickFunction;
begin
	If not States.UnitDead(Hero) then 
		aHeroPos := S.UnitPosition(Hero);
end;
		
	
function SetKS_Item(Name : String;	Attack,	Defense, Health, aTypeTo, Haste, ID, Slot,Cost : Integer) : KS_Item;
begin
	Result.Name := Name;
	Result.Attack := Attack;
	Result.Defense := Defense;
	Result.Health := Health;
	Result.aTypeTo := aTypeTo;
	Result.Haste := Haste;
	Result.ID := ID;
	Result.Slot := Slot;
	Result.Cost := Cost;
end;
	
Procedure OnMissionStartSetAllItems;
begin
	AllItems := [
		SetKS_Item('Hand',3,0,0,14,0, 0,0,999),
		SetKS_Item('Hand',3,0,0,14,0, 1,1,999),
	
		SetKS_Item('None',0,0,0,-1,0, 2,2,999),
		SetKS_Item('None',0,0,0,-1,0, 3,3,999),
		SetKS_Item('None',0,0,0,-1,0, 4,4,999),
		SetKS_Item('None',0,0,0,-1,0, 5,5,999),
		SetKS_Item('None',0,0,0,-1,0, 6,6,999),
		SetKS_Item('None',0,0,0,-1,0, 7,7,999),
	
		SetKS_Item('Hand Axe',10,0,0,14,3, 8,0,5),
		SetKS_Item('Old Horse',1,2,48,27,1, 9,7,15),
		//B class
		SetKS_Item('The Ancient Sword',36,0,0,22,6, 10,0,999),
		SetKS_Item('The Ancient Shield',0,7,18,-1,5, 11,1,999),
		SetKS_Item('The Ancient Helmet',0,7,0,-1,4, 12,2,999),
		SetKS_Item('The Ancient Chestplate',0,9,17,-1,4, 13,3,999),			
		SetKS_Item('The Ancient Leggings',0,8,0,-1,3, 14,4,999),
		SetKS_Item('The Ancient Boots',0,6,0,-1,3, 15,5,999),
		
		SetKS_Item('Stick',3,1,1,14,1, 16,1,1),//woodcutter
		SetKS_Item('Pickaxe',12,1,1,14,6, 17,0,8),//querry
		SetKS_Item('Fork',9,1,1,14,4, 18,0,6),//farm
		SetKS_Item('Lance',20,0,0,19,4, 19,0,10),
		SetKS_Item('Long Bow',35,0,1,17,4, 20,0,10),
		SetKS_Item('Iron axe',14,0,0,15,7, 21,0,12),
		SetKS_Item('Hand axe',10,0,0,-1,3, 22,1,5),
		
		SetKS_Item('Sword Xiphos',12,0,0,27,3, 23,0,37),
		SetKS_Item('Sword Xiphos',12,0,0,27,3, 24,1,37),
		SetKS_Item('Royal Horse',6,7,163,22,3, 25,7,999),
		
		SetKS_Item('Wooden Shield',0,2,3,-1,2, 26,1,20),
		SetKS_Item('Wooden Helmet',0,2,0,-1,2, 27,2,23),
		SetKS_Item('Leather Armor',0,5,1,-1,1, 28,3,25),
		SetKS_Item('Leather Leggings',0,3,0,-1,1, 29,4,20),
		SetKS_Item('Leather Boots',0,2,0,-1,1, 30,5,15),
	
		SetKS_Item('Iron Helmet',0,4,0,-1,3, 31,2,25),
		SetKS_Item('Long Sword',26,0,0,16,6, 32,0,40),
		SetKS_Item('Pike',24,0,0,20,5, 33,0,50),
		SetKS_Item('Crossbow',60,1,2,18,5, 34,0,60),
		SetKS_Item('Double Axe',33,6,16,26,14, 35,0,130),
		
		SetKS_Item('Long Shield',0,4,6,-1,4, 36,1,40),
		SetKS_Item('Iron Helmet',0,4,0,-1,3, 37,2,46),
		SetKS_Item('Iron Armor',0,6,2,-1,3, 38,3,52),
		SetKS_Item('Iron Leggings',0,5,0,-1,2, 39,4,48),
		SetKS_Item('Iron Boots',0,3,0,-1,2, 40,5,40),
		
		SetKS_Item('Mustang',4,5,99,21,2, 41,7,40),
		
		// A class
		SetKS_Item('Ion Spear',65,5,17,22,14, 42,0,999),//right arm
		SetKS_Item('Ion Shell',4,6,311,-1,0, 43,1,999),//left arm
		SetKS_Item('Scanning Glasses',0,0,0,-1,1, 44,2,999),//helmet
		SetKS_Item('Power Chest Belt',0,35,0,-1,1, 45,3,999),//chestplate
		SetKS_Item('Multi Slots',0,0,0,-1,1, 46,4,999),//leggings
		SetKS_Item('Boots of the Multigravitation',0,5,0,-1,1, 47,5,999),//feet
		SetKS_Item('The Vial of Regeneration',0,0,0,-1,2, 48,6,999),//sakwa
		
		SetKS_Item('Woodcutter`s Axe',14,1,2,14,7, 49,0,22),	
		
		SetKS_Item('Medicinal Herbs',0,0,0,-1,1, 50,6,63),
		SetKS_Item('Cart of Wood',0,0,0,-1,3, 51,6,75),
		SetKS_Item('Cart of Coal',0,0,0,-1,3, 52,6,108),
		SetKS_Item('Cart of Stone',0,0,0,-1,3, 53,6,96),
		SetKS_Item('Cart of Gold',0,0,0,-1,3, 54,6,144),
		
		SetKS_Item('Meriton`s Sword',43,0,0,-1,3, 55,0,999)
	];
	
end;

procedure GroupHpInvulnerableSet(aGroupID : array of Integer; aInvulnerable : Boolean);
var I, K : Integer;
begin
	for K := 0 to high(aGroupID) do 
		for I := 0 to States.GroupMemberCount(aGroupID[K]) do
			A.UnitHPSetInvulnerable(States.GroupMember(aGroupID[K],I),aInvulnerable);
	
end;
function CheckTime(aTime : Integer) : Boolean;
begin
	If States.GameTime = aTime then 
		Result := true;
end;
function GetUnitNextLevel(aType : Integer) : Integer;
begin
	case aType of
		14 : Result := 15;
		15 : Result := 16;
		16 : Result := 26;
		17 : Result := 18;
		19 : Result := 20;
		21 : Result := 22;
		23 : Result := 26;
		24 : Result := 19;
		25 : Result := 17;
		27 : Result := 21;
		else Result := aType;
	end;
end;
function GetUnitMaxLevel(aType : Integer) : Integer;
begin
	case aType of
		14 : Result := 26;
		15 : Result := 26;
		16 : Result := 26;
		17 : Result := 18;
		19 : Result := 20;
		21 : Result := 22;
		23 : Result := 26;
		24 : Result := 20;
		25 : Result := 18;
		27 : Result := 22;
		else Result := aType;
	end;
end;

Procedure UpgradeArmy(aPlayer:Integer; aMax : Boolean);
var AUnits:array of integer;
	LEA,GroupLeader:Integer;
begin	
	AUnits:=States.PlayerGetAllGroups(aPlayer);
	For LEA := length(AUnits)-1 downto 0 do begin
		GroupLeader:=States.GroupMember(AUnits[LEA],0);
		If GroupLeader <>Hero then begin
			If not aMax then 
				Actions.GiveGroup(aPlayer,GetUnitNextLevel(States.UnitType(GroupLeader)),States.UnitPositionX(GroupLeader),States.UnitPositionY(GroupLeader),States.UnitDirection(GroupLeader),States.GroupMemberCount(AUnits[LEA]),States.GroupColumnCount(AUnits[LEA]))
			else 
				Actions.GiveGroup(aPlayer,GetUnitMaxLevel(States.UnitType(GroupLeader)),States.UnitPositionX(GroupLeader),States.UnitPositionY(GroupLeader),States.UnitDirection(GroupLeader),States.GroupMemberCount(AUnits[LEA]),States.GroupColumnCount(AUnits[LEA]));
				
			Actions.GroupKillAll(AUnits[LEA],true)
		end;
	end;
end;


function HeroInVillage(HeroPos : TKMPoint) : Integer;
var I, K : Integer;
begin
	Result := -1;
	for I := 0 to 5 do	
		If not VillageVisited[I] then 
			for K := 0 to high(VillageQuestGiver[I].QPontsToReveal) do
				If States.FogRevealed(0,VillageQuestGiver[I].QPontsToReveal[K].X,VillageQuestGiver[I].QPontsToReveal[K].Y) then 
					Result := I;
			
	If Result <> -1 then 	
	begin
		VillageVisited[Result] := true;
	end;
end;


function HeroNearbyEmissary(HeroPos : TKMPoint; Emissary : Integer) : Boolean;
var aPos : TKMPoint;
begin
	Result := false;
	aPos := U.KMPoint(255,255);
	case Emissary of
		1 : If not States.GroupDead(Emissary1) then aPos := States.UnitPosition(States.GroupMember(Emissary1,0));
		4 : If not States.GroupDead(Emissary4) then	aPos := States.UnitPosition(States.GroupMember(Emissary4,0));
		else Exit;
	end;
	If HeroPos = U.KMPoint(aPos.X,aPos.Y+2) then
	begin
		Result := True;
		EmissaryStats[Emissary] := eTalkStart;
	end;
end;


function GetArmyCountMultiPL(Players :array of Integer) : Integer;
var I : Integer;
begin
	for I := low(Players) to high(Players) do
		Result := Result + S.StatArmyCount(Players[I]);
end;

function GetUnitCosts(aType :Integer) :array of Integer;
begin
	case aType of
		14 : Result := [20];
		15 : Result := [20,16,18];
		16 : Result := [21,19,17];
		17 : Result := [18,24];
		18 : Result := [19,25];
		19 : Result := [18,22];
		20 : Result := [19,23];
		21 : Result := [20,16,18,26];
		22 : Result := [26,21,19,17];
		
		23,26 : Result := [8];
		24 : Result := [2];
		25 : Result := [3];
		27 : Result := [5];
	end;
end;
function GetHouseMSG(aType :Integer) :Ansistring;
begin
	case aType of
		0 : Result := '<$6>';
		1 : Result := '<$23>';
		2 : Result := '<$25>';
		3 : Result := '<$15>';
		4 : Result := '<$11>';
		5 : Result := '<$12>';
		6 : Result := '<$4>';
		7 : Result := '<$19>';
		8 : Result := '<$7>';
		9 : Result := '<$3>';
		10 : Result := '<$26>';
		12 : Result := '<$27>';
		13 : Result := '<$0>';
		14 : Result := '<$2>';
		15 : Result := '<$24>';
		16 : Result := '<$18>';
		17 : Result := '<$5>';
		18 : Result := '<$14>';
		19 : Result := '<$10>';
		20 : Result := '<$20>'; 
		21 : Result := '<$8>';
		22 : Result := '<$22>';
		24 : Result := '<$80>';
		25 : Result := '<$17>';
		27 : Result := '<$1>';
		28 : Result := '<$9>';
		29 : Result := '<$13>';
	end;
end;

function GetNextTree(aTreeID :Integer) :Integer;
begin
	case aTreeID of
		88 : Result := aTreeID+1;
		89 : Result := aTreeID+1;
		
		92 : Result := aTreeID+1;
		93 : Result := aTreeID+1;
		94 : Result := aTreeID+1;
		
		97 : Result := aTreeID+1;
		98 : Result := aTreeID+1;
		99 : Result := aTreeID+1;
		
		102 : Result := aTreeID+1;
		103 : Result := aTreeID+1;
		104 : Result := aTreeID+1;
		
		107 : Result := aTreeID+1;
		108 : Result := aTreeID+1;
		109 : Result := aTreeID+1;
		
		112 : Result := aTreeID+1;
		113 : Result := aTreeID+1;
		
		116 : Result := aTreeID+1;
		117 : Result := aTreeID+1;
		118 : Result := aTreeID+1;
		
		121 : Result := aTreeID+1;
		122 : Result := aTreeID+1;
		123 : Result := aTreeID+1;
		
		149 : Result := aTreeID+1;
		150 : Result := aTreeID+1;
		153 : Result := aTreeID+1;
		154 : Result := aTreeID+1;
		157 : Result := aTreeID+1;
		158 : Result := aTreeID+1;
		159 : Result := aTreeID+1;
		162 : Result := aTreeID+1;
		163 : Result := aTreeID+1;
		164 : Result := aTreeID+1;
		
		167 : Result := aTreeID+1;
		168 : Result := aTreeID+1;
		169 : Result := aTreeID+1;
		else Result := aTreeID;
	end;
end;

Procedure RemoveAttackToMultiPL(Players :array of Integer);
var I : Integer;
begin
	for I := low(Players) to high(Players) do
		Actions.AIAttackRemoveAll(Players[I]);
end;

Procedure StartCinematic(Mode, aDir : Integer);
begin
	If Mode = 0 then 
	begin
		Actions.CinematicStart(0);
		Actions.CinematicPanTo(0,States.UnitPositionX(Hero),States.UnitPositionY(Hero),0);
		Actions.GameSpeed(1);
		InCinematic := true;
		//Actions.GameSpeedChangeAllowed(false);
	end else
	begin
		Actions.CinematicEnd(0);
		Actions.GameSpeed(1);
		InCinematic := false;
		//Actions.GameSpeedChangeAllowed(true);
	end;
	Actions.UnitDirectionSet(Hero,aDir);
end;

function GetHeroStatDelta(aMode : Integer) : Ansistring;
var aDifference : array[0..3] of integer;
	aColor : Ansistring;
begin	
	Result := '';
	case aMode of 
		0:aDifference[aMode] := HeroStats[0].MultiHealth - HeroStats[1].MultiHealth;
		1:aDifference[aMode] := HeroStats[0].Attack - HeroStats[1].Attack;
		2:aDifference[aMode] := HeroStats[0].Defense - HeroStats[1].Defense;
		3:aDifference[aMode] := HeroStats[0].Haste - HeroStats[1].Haste;
	end;
	If aDifference[aMode] = 0 then 
		Exit;
	
	If aMode = 3 then 
	begin
		if aDifference[aMode] < 0 then 
			aColor := '[$00FF00]  '
		else
			aColor := '[$0000ff]  ';
	end else		
		if aDifference[aMode] > 0 then 
			aColor := '[$00FF00]  '
		else
			aColor := '[$0000ff]  ';
	If aDifference[aMode] > 0 then 
		Result := Result + aColor+'+'+IntToStr(aDifference[aMode]);
	If aDifference[aMode] < 0 then 
		Result := Result + aColor+IntToStr(aDifference[aMode]);
	
	Result := Result + ' <$' + IntToStr(91+aMode) + '>[$ffFFff]';
end;

Procedure ShowHeroStats;
var I, K : Integer;
	aPos,aPos2 : TKMPoint;
	finString : Ansistring;
begin
	//Actions.UnitHungerSet(Hero,27000)
	If length(HeroInventory[7]) = 0 then 
		Exit;
	Actions.OverlayTextSet(-1,'');
	If not States.HouseRepair(MainStoreHouse[0]) then 
	begin
		If  HeroStats[0].Health>0 then 
		begin
			If (States.GameTime < HeroStats[0].ChangeTime) then 
			begin
				finString := ''
				Actions.OverlayTextAppend(-1,'<$91> : [$00FF00]' +IntToStr(HeroStats[0].Health)+'[$FFFFFF] / [$0000FF]'+IntToStr(HPmax)+'[$FFFFFF]' + GetHeroStatDelta(0));
				Actions.OverlayTextAppend(-1,'|<$92> : [$00FF00]' +IntToStr(HeroStats[0].Attack)+'[$FFFFFF]' + GetHeroStatDelta(1));
				Actions.OverlayTextAppend(-1,'|<$93> : [$00FF00]' +IntToStr(HeroStats[0].Defense)+'[$FFFFFF]' + GetHeroStatDelta(2));
				//Actions.OverlayTextAppend(-1,'|Position : ' +IntToStr(aPos2.X)+' : '+IntToStr(aPos2.Y) + '[$FFFFFF]');
				Actions.OverlayTextAppend(-1,'|<$94> : [$00FF00]' + IntToStr(HeroStats[0].Haste)+'[$FFFFFF]' + GetHeroStatDelta(3));	
				Actions.OverlayTextAppend(-1,'[$00FF00]||Hero Inventory : [$FFFFFF]');
			end else
			begin
				Actions.OverlayTextAppend(-1,'<$91> : [$00FF00]' +IntToStr(HeroStats[0].Health)+'[$FFFFFF] / [$0000FF]'+IntToStr(HPmax)+'[$FFFFFF]');
				Actions.OverlayTextAppend(-1,'|<$92> : [$00FF00]' +IntToStr(HeroStats[0].Attack)+'[$FFFFFF]');
				Actions.OverlayTextAppend(-1,'|<$93> : [$00FF00]' +IntToStr(HeroStats[0].Defense)+'[$FFFFFF]');
				//Actions.OverlayTextAppend(-1,'|Position : ' +IntToStr(aPos2.X)+' : '+IntToStr(aPos2.Y) + '[$FFFFFF]');
				Actions.OverlayTextAppend(-1,'|<$94> : [$00FF00]' + IntToStr(HeroStats[0].Haste)+'[$FFFFFF]');	
				Actions.OverlayTextAppend(-1,'[$00FF00]||Hero Inventory : [$FFFFFF]');
			end;
			for I := low(HeroInventory)to high(HeroInventory) do
			begin
				K := SlotID[I]
				Actions.OverlayTextAppend(-1,'<$'+IntToStr(50+I)+'>' + HeroInventory[I][K].Name);
			end;
		end;
		
		If (States.UnitDead(Hero))then	
			Actions.OverlayTextAppend(-1,'|Your Hero is [$0000FF]DEAD');
			
	end else
	begin	
		Actions.OverlayTextAppend(-1,'<$95>');
		for I := 1 to 6 do			
			If States.PlayerAllianceCheck(0,I) then 
				Actions.OverlayTextAppend(-1,'|[$' + States.PlayerColorText(I)+']<$'+IntToStr(96+I)+'>[$ffffff]');
				
		Actions.OverlayTextAppend(-1,'||<$96>');
		for I := 1 to 6 do		
			If not States.PlayerAllianceCheck(0,I) and not States.PlayerAllianceCheck(I,0) then 
				Actions.OverlayTextAppend(-1,'|[$' + States.PlayerColorText(I)+']<$'+IntToStr(96+I)+'>[$ffffff]');
			
		Actions.OverlayTextAppend(-1,'|<$103>');	
		for I := 1 to 6 do			
			If not States.PlayerAllianceCheck(0,I) and States.PlayerAllianceCheck(I,0) then 
				Actions.OverlayTextAppend(-1,'|[$' + States.PlayerColorText(I)+']<$'+IntToStr(96+I)+'>[$ffffff]');
		
		If States.GameTime mod 50 = 0 then 
		begin	
			for I := 1 to 6 do	
				If States.PlayerAllianceCheck(0,I) then 
				begin
					aResourceString := '';
					If States.HouseResourceAmount(MainStoreHouse[I], 1) < 20 then 
						aResourceString := aResourceString + '|  ' + States.WareTypeName(1);
					If States.HouseResourceAmount(MainStoreHouse[I], 2) < 10 then 
						aResourceString := aResourceString + '|  ' + States.WareTypeName(2);
					If States.HouseResourceAmount(MainStoreHouse[I], 7) < 20 then 
						aResourceString := aResourceString + '|  ' + States.WareTypeName(7);
					
					If (States.HouseResourceAmount(MainStoreHouse[I], 8) + 
						States.HouseResourceAmount(MainStoreHouse[I], 10) + 
						States.HouseResourceAmount(MainStoreHouse[I], 13) + 
						States.HouseResourceAmount(MainStoreHouse[I], 27) < 50) then 
						aResourceString := aResourceString + '|  <$105>';
					If aResourceString <> '' then 
						aResourceString := '|[$' + States.PlayerColorText(I)+']<$'+IntToStr(96+I)+'>[$ffffff] :' + aResourceString;
				end;
		end;
		If aResourceString <> '' then 
		begin
			Actions.OverlayTextAppend(-1,'|<$104>');
			Actions.OverlayTextAppend(-1,aResourceString);
		end;
	end;
	
	If MinersKilled > 0 then 
		Actions.OverlayTextAppend(-1,'|<$635>' + IntToStr(12-MinersKilled));
		
	If States.GameTime > VillageQuestGiver[4].QEndTime then 
		If VillageQuestGiver[4].QEventType = 2 then 
				Actions.OverlayTextAppendFormatted(-1,'|<$632>',[30-QuestInteger[4]]);
	If not QuestTasks[2][1] then 			
		If States.GameTime > VillageQuestGiver[2].QEndTime then 
			If VillageQuestGiver[2].QEventType = 5 then
					Actions.OverlayTextAppendFormatted(-1,'|<$633>',[20-QuestInteger[5]]);
				
	If States.GameTime > VillageQuestGiver[3].QTime then 
		if VillageQuestGiver[3].QEventType = 2 then
				Actions.OverlayTextAppendFormatted(-1,'|<$652>',[5-TreesToChop]);
	
	//Actions.OverlayTextAppend(-1,'|'+IntToStr(HeroSpecialReg));	
	//Actions.OverlayTextAppend(-1,'|'+IntToStr(HeroStats[1].MultiHealth));	
end;

Function Point(X,Y:Integer) : TKMPoint;
begin
	Result := U.KMPoint(X,Y);
end;

Procedure GiveHouseMultipleTimes(aPlayer,aType:Integer; WithUnits, WithRoad:Boolean; aPoses:array of TKMPoint; RoadTo : TKMPoint);
var I , aX, aY, aUType, aUnit, aOwner : Integer;
	aPos, aUPos : TKMPoint;
begin
	aPos := RoadTo
	for I := low(aPoses) to high(aPoses) do 
	begin
		for aX := 0 to 3 do 
			for aY := 0 to 3 do 
				If States.UnitAt(aPoses[I].X-HouseTiles[aType].X + aX,aPoses[I].Y-3 + aY) > 0 then 
					If HouseTiles[aType].HouseOnTile[aX][aY] then 					
					begin
						aUnit := States.UnitAt(aPos.X-HouseTiles[aType].X + aX,aPos.Y-3 + aY)
						aOwner := States.UnitOwner(aUnit);
						aUPos := States.UnitPosition(aUnit);
						aUType := States.UnitType(aUnit);
						A.UnitKill(aUnit,true);
						If aUType < 14 then 
							A.GiveUnit(aOwner,aUType,aUPos.X,aUPos.Y+4,0)
						else
							A.GiveGroup(aOwner,aUType,aUPos.X,aUPos.Y+4,0,1,1);
					end;
					
		A.GiveHouse(aPlayer,aType,aPoses[I].X,aPoses[I].Y);
		If WithUnits then
			A.GiveUnit(aPlayer,0,aPoses[I].X,aPoses[I].Y+1,4);	
		If WithUnits then	
			A.GiveUnit(aPlayer,S.HouseTypeToOccupantType(aType),aPoses[I].X,aPoses[I].Y+1,4);
		If WithRoad then	
			A.PlanConnectRoad(aPlayer,aPoses[I].X,aPoses[I].Y+1,aPos.X,aPos.Y+1,true);
	end;
end;


procedure GiveResourcesFromVillage(aPlayer:Integer);
begin
	case aPlayer of
		0 : A.GiveWares(0,27,5+ States.KamRandomI(10));
		1 : A.GiveWares(0,5,10);
		2 :begin 
			A.GiveWares(0,8,5 + States.KamRandomI(10));
			A.GiveWares(0,9,5 + States.KamRandomI(15));
			A.GiveWares(0,10,5 + States.KamRandomI(20));
			end;
		3 : A.GiveWares(0,0,10);
		5 : A.GiveWares(0,20,43);
	end;
end;



function ArrayElementIndex(aElement : String; aArray : array of String) : Integer;
var I : Integer;
begin
	Result := -1;
	for I := low(aArray) to high(aArray) do
		If aElement = aArray[I] then
			Result := I;
end;

function ArrayElementIndexI(aElement : integer; aArray : array of Integer) : Integer;
var I : Integer;
begin
	Result := -1;
	for I := low(aArray) to high(aArray) do
		If aElement = aArray[I] then
			Result := I;
end;

function GetItemIndex(aID : Integer; aArray : array of KS_Item) : Integer;
var I : Integer;
begin
	Result := -1;	
	for I := low(aArray) to high(aArray) do
		If aID = aArray[I].ID then
			Result := I;
end;

Procedure KillAllGroups(aPlayer:Integer);
var LEA : Integer;
	AllGroups : array of Integer;
begin
	AllGroups := States.PlayerGetAllGroups(aPlayer);
	for LEA := 0 to length(AllGroups)-1 do
		A.GroupKillAll(AllGroups[LEA],true);
end;

Procedure SetWin(aWinType : KS_WinType);
begin
	Win.WinTime := States.GameTime;
	Win.WinType := aWinType;
end;

function PointArrayRemoveIndex(aArray : array of TKMPoint; aIndexes :array of Integer) : array of TKMPoint;
var I, K : integer;
	newArray : array of TKMPoint;
begin
	for I := 0 to high(aArray) do
		If not U.ArrayHasElementI(I, aIndexes) then 
		begin
			K := length(newArray)
			SetLength(newArray, K+1);
			newArray[K] := aArray[I];
		end;
	Result := newArray;
end;

Function GetMessageNumber(aPlayer : Integer) : Ansistring;
var I, aIndex : Integer;
begin
	//A.ShowMsg(-1,'');
	Result := '';
	for I := 0 to 3 do	
		if PlayersFirstDefeated[I] = aPlayer then 
			aIndex := I;
	
	case aIndex of 
		0 : case PlayersFirstDefeated[aIndex] of 
				6: Result := '<$338>';
				5: Result := '<$347>';
				4: Result := '<$354>';
				1: Result := '';
			end;
		
		1 : case PlayersFirstDefeated[0] of 
				6:	case PlayersFirstDefeated[1] of 
						4: Result := '<$340>';
						5: Result := '<$339>';
						1: Result := '';
					end;
				5:	case PlayersFirstDefeated[1] of 
						1: Result := '';
						4: Result := '<$348>';
						6: Result := '<$351>';
					end;
				4:	case PlayersFirstDefeated[1] of 
						1: Result := '';
						5: Result := '<$353>';
						6: Result := '<$358>';
					end;
			end;
		
		2 : case PlayersFirstDefeated[0] of 
				6:	case PlayersFirstDefeated[1] of 
						4:	case PlayersFirstDefeated[2] of 
								1: Result := '';
								5: Result := '<$345>';
							end;
						5:	case PlayersFirstDefeated[2] of 
								1: Result := '';
								4: Result := '<$355>';
							end;
					end;
				5:	case PlayersFirstDefeated[1] of 
						4:	case PlayersFirstDefeated[2] of 
								1: Result := '';
								6: Result := '<$349>';
							end;
						6:	case PlayersFirstDefeated[2] of 
								1: Result := '';
								4: Result := '<$352>';
							end;
					end;
				4:	case PlayersFirstDefeated[1] of 
						5:	case PlayersFirstDefeated[2] of 
								1: Result := '';
								6: Result := '<$382>';
							end;
						6:	case PlayersFirstDefeated[2] of 
								1: Result := '';
								5: Result := '<$359>';
							end;
					end;
					

			end;
	end;
	
end;

Procedure SetMultipleAlliances(aPlayers, aPlayers2 : array of Integer; aTrue : Boolean);
var I , K : Integer;
begin
	for I := 1 to high(aPlayers) do
			A.FogCoverAll(I);
	for K := 1 to high(aPlayers2) do
			A.FogCoverAll(K);
		
	for I := 0 to high(aPlayers) do
		for K := 0 to high(aPlayers2) do
			A.PlayerAllianceChange(aPlayers[I],aPlayers2[K],true,aTrue);
end;


Procedure ChangeHeroTo(aPos : TKMPoint; aType : Integer);
var aDir, aHunger : Integer;
begin
	If U.ArrayHasElementI(aType, [21,27]) then 
		case HeroInventory[0][SlotID[0]].Name of													
			'Iron axe' 							: aType := 21;	
			'The Ancient Sword' 				: aType := 22;	
			'The Sword of the God' 				: aType := 22;		
		end;
	
	If States.UnitType(Hero) = aType then 
		Exit;
	
	aDir := S.UnitDirection(Hero);
	aHunger := S.UnitHunger(Hero)-1;
	Actions.UnitHPSetInvulnerable(Hero,false);
	Actions.UnitKill(Hero,true);
	Hero := S.GroupMember(Actions.GiveGroup(0,aType,aPos.X,aPos.Y-1,aDir,1,1),0);
	A.UnitHungerSet(Hero,aHunger);
	Actions.UnitHPSetInvulnerable(Hero,true);	
end;

Procedure ChangeHeroWithNoHorse;
var K , I : Integer;
begin
	
	K := SlotID[0];
	I:= SlotID[7];
	If HeroInventory[7][I].Name <> 'None' then 
		ChangeHeroTo(aHeroPos,HeroInventory[7][I].aTypeTo)
	else 
	case HeroInventory[0][K].Name of
		'Hand' 							:	ChangeHeroTo(aHeroPos,14);
		
		'Hand axe' 							:	If U.ArrayHasElement(HeroInventory[3][SlotID[3]].Name,['The Ancient Chestplate','The Gods Chestplate']) then 
													ChangeHeroTo(aHeroPos,HeroInventory[0][K].aTypeTo)
												else
													ChangeHeroTo(aHeroPos,HeroInventory[0][K].aTypeTo);
		'Sword Xiphos' 						: begin
													ChangeHeroTo(aHeroPos,HeroInventory[0][K].aTypeTo);
													SlotID[7] := GetItemIndex(9,HeroInventory[7]);
											end;
		else ChangeHeroTo(aHeroPos,HeroInventory[0][K].aTypeTo);
	end;
end;

Procedure SetInventoryStats(aIndex : Integer);
var I , K: Integer;
begin
	If length(HeroInventory[7]) > 0 then
		for I := 0 to 7 do
			aItem[I] := HeroInventory[I][SlotID[I]];
			
	HeroStats[1].Attack := HeroStats[0].Attack;
	HeroStats[1].Defense := HeroStats[0].Defense;
	HeroStats[1].Haste := HeroStats[0].Haste;
	HeroStats[1].MultiHealth := HeroStats[0].MultiHealth;
	
	HeroStats[0].ChangeTime := States.GameTime + 300;
	HeroStats[0].MultiHealth := 0;
	
	If aIndex <> -1 then 
	begin	
		HeroStats[0].Attack := 0;
		HeroStats[0].Defense := 0;
		HeroStats[0].Haste := 0;
		HeroSpecialReg := 0;
		//Attack2 := 0;
		//Defense2 := 1;
		//Iloczyn2 := 0;
		//Haste := 0;
		If length(HeroInventory[7]) > 0 then
		begin

			If aItem[5].Name <> 'Boots of the Multigravitation'then 
			begin
				
				If aItem[7].ID <> 7 then
				begin
					If U.ArrayHasElement(aItem[0].Name, ['Lance','Pike','Double Axe', 'Long Bow', 'Crossbow']) then 
							SlotID[7] := 0;
					
					If U.ArrayHasElement(aItem[0].Name, ['Double Axe']) then 
							SlotID[7] := 0;
				end;
			
				If U.ArrayHasElementI(aItem[0].ID, [10,34,56]) then
					If aItem[1].ID <> 11 then 
						SlotID[1] := 0;
			end else	
				If U.ArrayHasElement(aItem[0].Name, ['Long Bow', 'Crossbow']) then 
						SlotID[7] := 0;
						
			If (aItem[6].ID = 48) or ((aItem[4].ID = 46) and (GetItemIndex(48,HeroInventory[6]) <> -1 ) ) then  
				HeroSpecialReg := HeroSpecialReg + 4;
			
			If (aItem[6].ID = 50) or ((aItem[4].ID = 46) and (GetItemIndex(50,HeroInventory[6]) <> -1 ) )   then 
				HeroSpecialReg := HeroSpecialReg + 2;
					
			for I := 0 to 7 do
				If length(HeroInventory[I]) > 0 then
				begin						
					aItem[I] := HeroInventory[I][SlotID[I]];
					HeroStats[0].Attack := HeroStats[0].Attack + aItem[I].Attack;
					HeroStats[0].Defense := HeroStats[0].Defense + aItem[I].Defense;
					HeroStats[0].Haste := HeroStats[0].Haste + aItem[I].Haste
				end;
			If States.GameTime > 10 then 
				ChangeHeroWithNoHorse;				
			
			If aItem[5].Name = 'Boots of the Multigravitation'then 
				HeroStats[0].Haste := 3;

		end;
		
		If aItem[0].Name = 'Sword Xiphos' then 
			If aItem[1].Name = 'Sword Xiphos' then 
				HeroStats[0].Attack := HeroStats[0].Attack + 7;
				
	end;
	for I := 0 to 7 do
		If length(HeroInventory[I]) > 0 then
			HeroStats[0].MultiHealth := HeroStats[0].MultiHealth + aItem[I].Health;
		
	HeroStats[0].MultiHealth := 50 + HeroStats[0].MultiHealth + HeroSpecialHPPoints;
	
	If States.GameTime < 10 then
	begin	
		HeroStats[1].Attack := HeroStats[0].Attack;
		HeroStats[1].Defense := HeroStats[0].Defense;
		HeroStats[1].Haste := HeroStats[0].Haste;
		HeroStats[1].MultiHealth := HeroStats[0].MultiHealth;
	end;
	
	HPmax:= HeroStats[0].MultiHealth;
	
	ShowHeroStats;
	
	If HeroStats[0].Health > HPmax then 
		HeroStats[0].Health := HPmax;
	
	If length(HeroInventory[7]) > 0 then
		for I := 0 to 7 do
			aItem[I] := HeroInventory[I][SlotID[I]];
end;

Procedure AddInventoryItem(Item : KS_Item);
var aIndex, I : Integer;
begin
	aIndex := Item.Slot;
	
	If GetItemIndex(Item.ID,HeroInventory[aIndex]) <> -1 then 
		Exit;
		
	I := length(HeroInventory[aIndex]);
	SetLength(HeroInventory[aIndex], I+1);
	HeroInventory[aIndex][I] := Item;	
	SlotID[aIndex] := I;	
	SetInventoryStats(aIndex);
	
end;

function GetItemCost(aIndex : Integer) : Integer;
begin
	Result := AllItems[aIndex].Cost;	
end;

function GetItemName(aIndex : Integer) : AnsiString;
begin
	Result := AllItems[aIndex].Name;	
end;

Procedure GiveItemFromID(aIndex : Integer);
begin	
	AddInventoryItem(AllItems[aIndex]);	
end;

procedure AddMultiMessages(aArrayI: array of AnsiString ; ItemsToGive : array of Integer);
var aLength, I : integer;
begin
	If length(aArrayI) > 0 then 
		for I := 0 to high(aArrayI) do 
		begin
			aLength := length(MultiMessages.aShowArray);
			SetLength(MultiMessages.aShowArray, aLength + 1);
			MultiMessages.aShowArray[aLength] := aArrayI[I];
		end;
		
	If length(ItemsToGive) > 0 then 
	begin
		aLength := length(MultiMessages.ItemAtLastMessage);
		SetLength(MultiMessages.ItemAtLastMessage, aLength + length(ItemsToGive) );
		for I := 0 to high(ItemsToGive) do
			MultiMessages.ItemAtLastMessage[aLength + I ] := ItemsToGive[I];
	end;
end;

Procedure GiveMultipleItemsWithNoMSG(aArray : array of Integer);
var I : Integer;
begin
	for I := 0 to high(aArray) do
		GiveItemFromID(aArray[I]);
end;

Procedure GiveMultipleItems(aArray : array of Integer);
var I : Integer;
	finString : AnsiString;
begin
	for I := 0 to high(aArray) do
	begin
		finString := finString + '|  ' + GetItemName(aArray[I]);
		GiveItemFromID(aArray[I]);
	end;
	AddMultiMessages(['<$161>' + finString], [])
end;

Procedure SetMSGWithItem(aArray : array of Integer);
var I : Integer;
	finString : AnsiString;
begin
	If length(aArray) <= 0 then 
		Exit;
		
	for I := 0 to high(aArray) do
		finString := finString + ', ' + GetItemName(aArray[I]);
		
	AddMultiMessages(['<$161>' + finString], [])
end;


Procedure GiveSpecialItem;
var Random, aTrue : Integer;
	aName : AnsiString;
begin
	aTrue := -1;
	Random := U.RandomRangeI(42,48);	
	
	If GetItemIndex(Random,HeroInventory[Random-42]) = -1 then 
	begin
		AddMultiMessages([], [Random])
		aTrue := 0;
	end;
	If aTrue = -1 then 
		GiveSpecialItem;
end;

procedure SetNewMultiMessages(aArrayI : array of Integer; aModTime : Integer; ItemsToGive, GroupsToKill : array of Integer);
var I : Integer;
begin
	MultiMessages.aIndex := 0;
	MultiMessages.aModTime := aModTime;
	SetLength(MultiMessages.aShowArray,  length(aArrayI));
	for I := 0 to high(aArrayI) do	
		MultiMessages.aShowArray[I] := '<$' + IntToStr(aArrayI[I]) + '>';
		
	SetMSGWithItem(ItemsToGive);
	MultiMessages.ItemAtLastMessage := ItemsToGive;
	MultiMessages.GroupsToKill := GroupsToKill;
end;

procedure ShowMultiMessages(aIndex : integer; aArrayI : array of AnsiString);
var I : Integer;
begin
	A.ShowMSG(0, aArrayI[aIndex]);
	If aIndex = high(aArrayI) then 
	begin
		If length(MultiMessages.ItemAtLastMessage) > 0 then
			GiveMultipleItemsWithNoMSG(MultiMessages.ItemAtLastMessage);
			
		If length(MultiMessages.GroupsToKill) > 0 then
			for I := 0 to high(MultiMessages.GroupsToKill) do
			begin
				GroupHpInvulnerableSet([MultiMessages.GroupsToKill[I]],false)
				A.GroupKillAll(MultiMessages.GroupsToKill[I], true);
			end;
				
	end;
	MultiMessages.aIndex := aIndex + 1;
end;

Procedure GiveRandomFromRuins;
var Random, I, II : Integer;
	FinString : Ansistring;
begin
	FinString := '<$89>';
	Random := States.KaMRandomI(100);
	I := States.KaMRandomI(5)+1;
	II := States.KaMRandomI(5)+1;
	case Random of
		0..25 : begin
					FinString := FinString +'|' + States.WareTypeName(1) + ' : ' + IntToStr(I)
					FinString := FinString +'|' + States.WareTypeName(2) + ' : ' + IntToStr(II)
					A.GiveWares(0, 1, I);
					A.GiveWares(0, 2, II);
				end;
		26..50 : begin
					FinString := FinString +'|' + States.WareTypeName(0) + ' : ' + IntToStr(I)
					FinString := FinString +'|' + States.WareTypeName(5) + ' : ' + IntToStr(II)
					A.GiveWares(0, 0, I);
					A.GiveWares(0, 5, II);
				end;
		51..55 : begin
					FinString := FinString +'|' + States.WareTypeName(1) + ' : ' + IntToStr(I)
					FinString := FinString +'|' + States.WareTypeName(24) + ' : ' + IntToStr(II)
					A.GiveWares(0, 1, I);
					A.GiveWares(0, 24, II);
				end;
		56..85 : begin
					FinString := FinString +'|' + States.WareTypeName(1) + ' : ' + IntToStr(I)
					A.GiveWares(0, 1, I);
				end;
		86..100 : begin
					FinString := FinString +'|' + States.WareTypeName(0) + ' : ' + IntToStr(I)
					FinString := FinString +'|' + States.WareTypeName(1) + ' : ' + IntToStr(I)
					FinString := FinString +'|' + States.WareTypeName(2) + ' : ' + IntToStr(II)
					A.GiveWares(0, 0, I);
					A.GiveWares(0, 1, I);
					A.GiveWares(0, 2, II);
				end;
	end;
	A.ShowMSG(0, FinString);
end;


Function PosInRadius(aPos, aPoint : TKMPoint; aRadius : Integer) : boolean;
begin
	Result := false;
	If U.InAreaI(aPos.X,aPos.Y,aPoint.X - aRadius,aPoint.Y - aRadius,aPoint.X + aRadius,aPoint.Y + aRadius) then
		Result := true;

end;

procedure AddPatroll(aPlayer, aType : Integer; aPos1,aPos2 : TKMPoint);
var I : Integer;
begin
	I := length(Patrolls);
	SetLength(Patrolls, I + 1);
	Patrolls[I].aPos1 := aPos1;
	Patrolls[I].aPos2 := aPos2;
	Patrolls[I].aID := A.GiveGroup(aPlayer,aType, aPos1.X,aPos1.Y,0,1,1);
	A.GroupOrderWalk(Patrolls[I].aID, aPos2.X,aPos2.Y,0);
end;