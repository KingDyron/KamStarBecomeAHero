



var	VillageVisited : array[0..5] of Boolean;
	MainStoreHouse : array[0..17] of Integer;
var aPlayersUType : array[0..5] of array of Integer;
	aPlayersGType : array[4..13] of array of Integer;

type KS_EmissaryType = (eNone,eNotArrived,eArrived,eKilled,eDenied,eAccepted,
						eTalkStart,eTalkEnd,eAllied,eNotAllied,eWaiting, eAttacking,
						eDefended,eHelping,eInDanger, eBetrayed, ePicked);
						
type KS_QuestType = (qNone,qServes,qFFA,qDef6,qFFA1, qTheChoice, qTheKing1, qEscort, qLeftGarrison,
					 qCivilWar, qMilin, qAraton, qAttackOnMilin, qFormation1, qFormation2,
					 qTheKing2);

type KS_WinType = (wNone, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, wX, w11, w12);

type KS_QuestTypeSet = set of KS_QuestType;


type KS_HouseData = record
	Usable : Boolean;
	X, Y : Integer;
	HouseOnTile : array[0..3] of array[0..3] of Boolean;
end;

type KS_PatrolData = record
	aID : Integer;
	aPos1 : TKMPoint;
	aPos2 : TKMPoint;
	aMode : Boolean;
end;

const 
	QT_MAX = 16;
	NextQuestTime = 1200;
	
	
type KS_QuestTypeTime = record
	aTime : Integer;
	QType : KS_QuestType;
	QMadeTime : array[0..QT_MAX] of Integer;
	QMade : array[0..QT_MAX] of Boolean;
	
	QVOnQuest : Boolean;
	QVVillageType,
	QVStartTime	: Integer;
end;

type KS_Item = record
	Attack,
	Defense, 
	Health,
	aTypeTo,
	Haste,
	ID,
	Slot,
	Cost: Integer;
	Name : String;
end;

type KS_HeroStats = record
	Attack,
	Defense, 
	Health,
	MultiHealth,
	Haste, 
	ChangeTime: Integer;
end;


type KS_StartArmy = record
	Warr,
	Cav,
	Cross,
	Pike : Integer;
end;

type KS_HousesDATA = record
	aType, aTime, ID, aDelay, 
	VisTime : Integer;//visiting time
	Pos : TKMPoint;
	Once : Boolean;
	Trading : Boolean;
end;

type KS_PlayerAll = record
	AttackedTime, DefeatedTime : Integer;
	Attacked,
	Defeated : Boolean;
end;

type KS_VillageQuest = record
	LastQuest : Boolean;//wares Deliverry
	DTrue : Boolean;//wares Deliverry
	DMan : Integer;//wares Deliverry
	QGiver : Integer;
	QTime,QEndTime : Integer;
	QEventType : Integer;
	QPos : TKMPoint;
	
	QPontsToReveal : array of TKMPoint;
end;

type KS_WinSet = record
	WinTime : Integer;
	WinType : KS_WinType;
end;

type KS_MultiMessages = record
	aIndex, aModTime : Integer;
	aShowArray : array of AnsiString;
	ItemAtLastMessage : array of Integer;
	GroupsToKill : array of Integer;
end;
type KS_UnitData = record
	aType, aCount,ToPlayer, aMod : Integer;
	Added : Boolean;
end;



var HouseTiles : array[0..29] of KS_HouseData;

var StartUnitCount : array[0..18] of KS_StartArmy;
	BarracksPos, THPos : TKMPoint;
	HousesFirstBuilt : array[0..10] of KS_HousesDATA;
	Hero, Emissary1, Emissary4, Emissary5, Emissary6, PlayerBuildingsDestroyed, MeritonSword : Integer;
	EmissaryStats : array[0..8] of KS_EmissaryType;
	VisitedLastVillage, UnlimitedFishes, HeroNotHungry, HeroImmortal,
	GoldDoubleProduction, ArmorDoubleProduction, CanSendArmy, Pl7CanEquipWarriors: Boolean;
	PlayersAttacked : array[0..18] of KS_PlayerAll;
	DefAttack : array[0..8] of boolean;
	CavarlyGroup, FreeUnitsToEquip, duckIndex,
	BiggerEnemyAttacks
	: Integer;
	QuestNow : KS_QuestTypeTime;
	PlayersFirstDefeated : array[0..3] of Integer;
	QuestInteger :array[0..6] of integer;
	Win : KS_WinSet;
	TheChoice : array[0..3] of Integer;
	TheLast : array[0..2] of Integer;
	UnlimitedCoalPoints,UnlimitedIronPoints,UnlimitedGoldPoints : array of TKMPoint;
	MultiMessages : KS_MultiMessages;
	ScannerOn, Player2Attacks, Meriton: Boolean;
	Ruins : array of TKMPoint;
	InstantKill : array[0..18] of Boolean;
	QuestSet : KS_QuestTypeSet;
	
	ShowStatsOrPlayers : array[0..1] of Integer;
	aResourceString : String;
	BarbariansVisited : Boolean;
	Player7TH : integer;
	aHeroPos : TKMPoint;
	BarbarainsStartPositions : array of TKMPoint;
	BarrackVillageHelp : KS_UnitData;
	GroupsToSend : array[14..27] of Integer;
	TimeGroup,GDir,GPosX,GPosY : Integer;
//event times variables
var	AttacksTime : array[0..11] of Integer;
	EmissaryTime : array[0..8] of integer;
	Ducks : array of Integer;
	WallBuildingTime1, WallBuildingTime2,
	CornVillageHousesBuilt: Integer;
	RandomTime, BeaconSetTime, FirstTaskTime : Integer;
	
const 	POOL_X1 = 27;
		POOL_Y1 = 199;
		POOL_X2 = 40;
		POOL_Y2 = 215;
///hero variables

var aHeroAttackTime:Integer;// special variables
	HPmax:Integer;//constant variables
	SlotID : array[0..7] of integer;
	HeroInventory : array[0..7] of array of KS_Item;
	aItem : array[0..7] of KS_Item; 
	AllItems : array of KS_Item; 
	HeroStats :array[0..1] of KS_HeroStats;
	RandomItems : array[0..5] of Integer;
var HeroSpecialPoints, HeroSpecialHPPoints, HeroSpecialReg : Integer;
	AncientFound : array[0..7] of Boolean;
	

///villages variables
var VillageQuestGiver : array[0..5] of KS_VillageQuest;
	QuestTasks : array[0..5] of array[0..5] of Boolean;
	MessageDelay, MessageDelay2 : Integer;
	MinersToTrain, MinersKilled, TreesToChop, TreesToTime: Integer;
	InCinematic : Boolean;
	Patrolls : array of KS_PatrolData;
	
	DifficultyMultipiers : array[0..5] of Integer;
	HouseDestroyedByScript : Boolean;
//wares giving
var Gracz: Integer;//array of integer; - zmienna ma w sobie zbiór liczb ca³kowitych, mo¿e byæ maksymalnie ileœ liczb w zale¿noœci co chesz zrobiæ                                            
	Giving: boolean;
	Stores:array of integer;
	TimeG,TimeT, GroupID, Confirm:Integer;
	
{$I KS_Functions.script}
{$I AIBuilding.script}
{$I KS_Attacks.script}
{$I KS_AIAttacks.script}
{$I KS_Emissary.script}
{$I KS_Hero.script}
{$I KS_WaresGiving.script}
{$I KS_DoubleProduction.script}
{$I KS_Villages.script}


Procedure EquipWarrior;
var I :Integer;
	aPos : TKMPoint;
begin
	If Pl7CanEquipWarriors then 
		If Player7TH > 0 then 
			If States.HouseResourceAmount(Player7TH, 7) > 8 then 
			begin
				aPos := States.HousePosition(Player7TH);
				A.GiveGroup(6,26,aPos.X,aPos.Y+1, 4,1,1);
				A.HouseTakeWaresFrom(Player7TH,7,8)			
			end;
	If States.HouseAt(THPos.X,THPos.Y) > 0 then
		If States.HouseResourceAmount(States.HouseAt(THPos.X,THPos.Y), 7) > 8 then 
			If (States.StatUnitTypeCount(1,16)+States.StatUnitTypeCount(1,26)) < StartUnitCount[1].Warr then
				begin
					Actions.GiveGroup(1,26,THPos.X,THPos.Y+2,4,1,1);
					A.HouseTakeWaresFrom(States.HouseAt(THPos.X,THPos.Y),7,8)
				end;
	for I := 7 to 10 do
	begin
		If States.HouseAt(THPos.X,THPos.Y) > 0 then 
			If States.HouseResourceAmount(States.HouseAt(THPos.X,THPos.Y), 7) > 8 then 
				If (States.StatUnitTypeCount(I,16)+States.StatUnitTypeCount(I,26)) < StartUnitCount[I].Warr then 
				begin
					Actions.GiveGroup(I,26,THPos.X,THPos.Y+2,4,1,1);
					A.HouseTakeWaresFrom(States.HouseAt(THPos.X,THPos.Y),7,8)
				end;
		
		If States.HouseAt(BarracksPos.X,BarracksPos.Y) > 0 then 
		begin
			If States.StatUnitTypeCount(I,22) < StartUnitCount[I].Cav then
				If (States.HouseResourceAmount(STates.HouseAt(BarracksPos.X,BarracksPos.Y),21) > 0) and
				(States.HouseResourceAmount(STates.HouseAt(BarracksPos.X,BarracksPos.Y),26) > 0) and
				(States.HouseResourceAmount(STates.HouseAt(BarracksPos.X,BarracksPos.Y),17) > 0) and
				(States.HouseResourceAmount(STates.HouseAt(BarracksPos.X,BarracksPos.Y),19) > 0) then
				begin		
					Actions.GiveGroup(I,22,BarracksPos.X,BarracksPos.Y+2,4,1,1);
					Actions.HouseTakeWaresFrom(STates.HouseAt(BarracksPos.X,BarracksPos.Y),21,1);
					Actions.HouseTakeWaresFrom(STates.HouseAt(BarracksPos.X,BarracksPos.Y),26,1);
					Actions.HouseTakeWaresFrom(STates.HouseAt(BarracksPos.X,BarracksPos.Y),17,1);
					Actions.HouseTakeWaresFrom(STates.HouseAt(BarracksPos.X,BarracksPos.Y),19,1);
				end;
			
			If States.StatUnitTypeCount(I,20) < StartUnitCount[I].Pike then
				If(States.HouseResourceAmount(STates.HouseAt(BarracksPos.X,BarracksPos.Y),23) > 0) and
				(States.HouseResourceAmount(STates.HouseAt(BarracksPos.X,BarracksPos.Y),19) > 0) then
				begin
					Actions.GiveGroup(I,20,BarracksPos.X,BarracksPos.Y+2,4,1,1);
					Actions.HouseTakeWaresFrom(STates.HouseAt(BarracksPos.X,BarracksPos.Y),23,1);
					Actions.HouseTakeWaresFrom(STates.HouseAt(BarracksPos.X,BarracksPos.Y),19,1);
				end;
			If States.StatUnitTypeCount(I,18) < StartUnitCount[I].Cross then
				If(States.HouseResourceAmount(STates.HouseAt(BarracksPos.X,BarracksPos.Y),25) > 0) and
				(States.HouseResourceAmount(STates.HouseAt(BarracksPos.X,BarracksPos.Y),19) > 0) then
				begin
					Actions.GiveGroup(I,18,BarracksPos.X,BarracksPos.Y+2,4,1,1);
					Actions.HouseTakeWaresFrom(STates.HouseAt(BarracksPos.X,BarracksPos.Y),25,1);
					Actions.HouseTakeWaresFrom(STates.HouseAt(BarracksPos.X,BarracksPos.Y),19,1);
				end;		
		end;		
	end;
end;



Procedure PlayerFeed(aPlayer:Integer);
var LEA : Integer;
	AllGroups : array of Integer;
begin
	AllGroups := States.PlayerGetAllUnits(aPlayer);
	for LEA := 0 to length(AllGroups)-1 do
		A.UnitHungerSet(AllGroups[LEA],States.UnitMaxHunger-600-S.KaMRandomI(600));
end;

Procedure AutoFeed;
begin
	PlayerFeed(7);
	PlayerFeed(8);
	PlayerFeed(9);
	PlayerFeed(12);
	PlayerFeed(13);
end;

Procedure CheckGroupsAtArea(aPlayer:Integer);
var LEA : Integer;
	AllGroups : array of Integer;
	aPos : TKMPoint;
begin
	AllGroups := States.PlayerGetAllGroups(aPlayer);
	for LEA := 0 to length(AllGroups)-1 do
	begin
		aPos := States.UnitPosition(S.GroupMember(AllGroups[LEA],0));
		If U.InAreaI(aPos.X,aPos.Y,194,93,255,130) then 
		begin
			A.PlayerAllianceChange(1,5,true,true);
			QuestNow.QType := qFFA1;
			A.ShowMSG(0, '<$235>')
		end;
	end;	
end;

Procedure AddStoneToTowers(aPlayer : Integer);
var LEA : Integer;
	AllHouses : array of Integer;
begin
	AllHouses := States.PlayerGetAllHouses(aPlayer);
	If length(AllHouses) > 0 then 
		for LEA := 0 to high(AllHouses) do
			If S.HouseType(AllHouses[LEA]) = 17 then
				If S.HouseResourceAmount(AllHouses[LEA],1) < 4 then	
					A.HouseAddWaresTo(AllHouses[LEA],1,1);
end;


Procedure BuildOnDef61;
begin
	A.PlanAddHouse(5,16,221,101);
	A.PlanAddHouse(5,25,207,110);
	A.PlanAddHouse(5,20,208,104);
	A.PlanAddHouse(5,15,210,100);
	A.PlanConnectRoad(5,221,102,213,107,false);
	A.PlanConnectRoad(5,207,111,213,107,false);
	A.PlanConnectRoad(5,208,105,213,107,false);
	A.PlanConnectRoad(5,210,101,213,107,false);
end;

Procedure BuildOnDef62;
begin
	A.PlanAddHouse(5,1,202,110);//huta
	A.PlanAddHouse(5,2,236,122);//kóŸnia 1
	A.PlanAddHouse(5,10,241,123);//kóŸnia 2
	A.PlanConnectRoad(5,202,111,213,107,false);
	A.PlanConnectRoad(5,236,123,213,107,false);
	A.PlanConnectRoad(5,241,124,213,107,false);
end;

Procedure BuildAWall(mode, First : Integer);
var aX,aY, xx, yy : Integer;
begin
	xx := 6;
	yy := 14;
	If First = 0 then 
		case mode of
			-4:	begin
					for aY := 184 to 190 do
						Actions.MapTileObjectSet(55,aY,9);
					for aY := 184 to 190 do
						Actions.MapTileObjectSet(54,aY,8);
				end;
			-3:	begin
					for aY := 184 to 190 do
						Actions.MapTileObjectSet(55,aY,255);
					for aY := 184 to 190 do
						Actions.MapTileObjectSet(54,aY,255);
				end;
			-2:	begin
					for aX := 65 to 71 do
						Actions.MapTileObjectSet(aX+xx,176+yy,9);
					for aX := 65 to 71 do
						Actions.MapTileObjectSet(aX+xx,176+yy+1,8);
				end;
			-1:	begin
					for aX := 65 to 71 do
						Actions.MapTileObjectSet(aX+xx,176+yy,255);
					for aX := 65 to 71 do
						Actions.MapTileObjectSet(aX+xx,176+yy+1,255);
				end;
			0: 	begin
					for aX := 65 to 71 do
						Actions.MapTileSet(aX+xx,176+yy,206,2);
				end;
			1: 	begin
					for aX := 65 to 71 do
						Actions.MapTileSet(aX+xx,177+yy,175,0);
					for aX := 66 to 71 do
					begin
						//Actions.MapTileHeightSet(aX+xx,175+yy,30);
						Actions.MapTileHeightSet(aX+xx,176+yy,40);
						Actions.MapTileHeightSet(aX+xx,177+yy,50);
						Actions.MapTileHeightSet(aX+xx,178+yy,40);
					end;
				end;
			2: 	begin
					for aY := 184 to 190 do
						Actions.MapTileSet(55,aY,206,3);
				end;
			3: 	begin
					for aY := 186 to 190 do
						Actions.MapTileSet(54,aY,175,1);
					for aY := 185 to 190 do
						Actions.MapTileHeightSet(55,aY,40);
					for aY := 185 to 190 do
						Actions.MapTileHeightSet(56,aY,25);
					for aY := 185 to 190 do
						Actions.MapTileHeightSet(54,aY,25);
				end;
		end;
	xx := 0;
	yy := 0;
	If First = 1 then 
		case mode of
			0: 	begin
					for aX := 65 to 71 do
						Actions.MapTileSet(aX+xx,176+yy,206,2);
				end;
			1: 	begin
					for aX := 65 to 71 do
						Actions.MapTileSet(aX+xx,179+yy,206,0);
				end;
			2: 	begin
					Actions.MapTileSet(65+xx,177+yy,206,1);
					Actions.MapTileSet(65+xx,178+yy,206,1);
					Actions.MapTileSet(65+xx,176+yy,202,1);
					Actions.MapTileSet(65+xx,179+yy,202,0);
				end;
			3: 	begin
					Actions.MapTileSet(71+xx,177+yy,206,3);
					Actions.MapTileSet(71+xx,178+yy,206,3);
					Actions.MapTileSet(71+xx,176+yy,202,2);
					Actions.MapTileSet(71+xx,179+yy,202,3);
				end;
			4: 	begin
					for aX := 66 to 70 do
						for aY := 177 to 178 do
							Actions.MapTileSet(aX+xx,aY+yy,215,0);
				end;
			5: 	begin
					for aX := 65 to 72 do
						for aY := 176 to 180 do
							Actions.MapTileHeightSet(aX+xx,aY+yy,30);
					for aX := 66 to 71 do
						for aY := 177 to 179 do
							Actions.MapTileHeightSet(aX+xx,aY+yy,40);
				end;
			6: 	begin
					Actions.MapTileSet(67+xx,179+yy,215,0);
					Actions.MapTileSet(68+xx,179+yy,215,0);
				end;
			7: 	begin
					for aX := 65 to 72 do
						for aY := 176 to 180 do
							Actions.MapTileObjectSet(aX+xx,aY+yy,61);
				end;
			8: 	begin
					for aX := 65 to 72 do
						for aY := 176 to 180 do
							Actions.MapTileObjectSet(aX+xx,aY+yy,255);
				end;
		end;
end;

Procedure SetDucksArray;
var aX,aY,j, aUnit : Integer;
begin
	for aX := POOL_X1 to POOL_X2 do
		for aY := POOL_Y1 to POOL_Y2 do
		If States.UnitAt(aX,aY) > 0 then 
		begin
			aUnit := States.UnitAt(aX,aY);
			If States.UnitType(aUnit) = 37 then
			begin
				j := length(Ducks);
				SetLength(Ducks, j+1);
				Ducks[j]:=aUnit;
			end;
		end;
end;


{$I KS_HousesBonus.script}

Procedure OnPlayerDefeated(aPlayer: Integer);
var I, allDef : Integer;
begin
	PlayersAttacked[aPlayer].Defeated:= true;
	PlayersAttacked[aPlayer].DefeatedTime:= States.GameTime + 1200;
	
	If aPlayer = 11 then 
	begin
		//A.GiveGroup(2, 22, 26, 44, 0, 1, 1);
		//SetNewMultiMessages([152],60,[])
	end;
	
	If aPlayer = 14 then 
	begin
		//A.GiveGroup(2, 22, 26, 44, 0, 1, 1);
		//SetNewMultiMessages([153],60,[])
	end;
	
	If not Player2Attacks then 
		If PlayersAttacked[11].Defeated then 
			If PlayersAttacked[14].Defeated then 
				If PlayersAttacked[12].Defeated then 
				begin					
					SetNewMultiMessages([151],60,[],[]);
					Player2Attacks := true;
					A.AIEquipRate(2,1,600);
					A.AIEquipRate(3,1,600);
					Actions.AIAttackAdd(2,true,1,45,1,1,1,1,true,attClosestBuildingFromArmy,U.KMPoint(213,106))
					Actions.AIAttackAdd(3,true,1,45,1,1,1,1,true,attClosestBuildingFromArmy,U.KMPoint(213,106))					
				end;
					
	If Win.WinTime = 999999 then 
	begin
		If U.ArrayHasElementI(aPlayer, [2,3]) then 
			If States.PlayerDefeated(2) and  States.PlayerDefeated(3) then 
				If QuestNow.QType in [qFormation1, qFormation2] then 
				begin
					SetImmortality2(1,false);
					QuestNow.QMadeTime[12] := States.GameTime+ 100;	
				end;
				
		If aPlayer = 1 then 
		begin
			If QuestNow.QType = qTheKing1 then
			begin
				Win.WinTime := States.GameTime;
				Win.WinType := w9;
			end;
			If QuestNow.QType = qTheKing2 then
			begin
				Win.WinTime := States.GameTime;
				Win.WinType := w8;
			end;
		end;
		If QuestNow.QType = qFFA then
		begin
			If U.ArrayHasElementI(aPlayer, [1,4,5,6]) then
			begin
				
				for I := 0 to 6 do 
					If not PlayersAttacked[I].Defeated then
						FFAAttack(I);
						
				If PlayersFirstDefeated[0] = -1 then 
					PlayersFirstDefeated[0] := aPlayer
				else 
				If PlayersFirstDefeated[1] = -1 then 
					PlayersFirstDefeated[1] := aPlayer
				else 
				If PlayersFirstDefeated[2] = -1 then 
					PlayersFirstDefeated[2] := aPlayer
				else 
				If PlayersFirstDefeated[3] = -1 then 
					PlayersFirstDefeated[3] := aPlayer;
					
				If GetMessageNumber(aPlayer) <> '' then 	
					A.ShowMSG(-1,GetMessageNumber(aPlayer));
					
				If (PlayersFirstDefeated[3] <> -1) then
				begin 
					Win.WinTime := States.GameTime;
					Win.WinType := w6;
				end;
				
				If (PlayersFirstDefeated[0] = 1) or (PlayersFirstDefeated[1] = 1) or (PlayersFirstDefeated[2] = 1)  then
					 SetWin(w7);
				If (PlayersFirstDefeated[3] = 1) then
					 SetWin(w8);
			end;
		end;
			
			
		If QuestNow.QType = qNone then
			If HousesFirstBuilt[5].aType = -1 then 
				If aPlayer = 1 then 
				begin
					If allDef = 1 then 
					begin
						Win.WinTime := States.GameTime;
						Win.WinType := wX;
						A.ShowMSG(0,'Droga na skroty || opcja X')
					end
					else begin
						Win.WinTime := States.GameTime;
						Win.WinType := w11;
						A.ShowMSG(0,'Droga na skroty ||opcja 11');						
					end;
				end;
	end;
end;


Procedure OnTickVillageReaveling;
var I, VisitedVillage : Integer;
begin
	//village revealing
	If not VisitedLastVillage then 
		If States.GameTime mod 20 = 0 then 
		begin
			VisitedVillage := HeroInVillage(U.KMPoint(States.UnitPositionX(Hero),States.UnitPositionY(Hero)));
			If VisitedVillage <> -1 then 
			begin
				case VisitedVillage of 
					0 : begin
							Actions.FogRevealCircle(0,140,240,22)
						end;//fish
					1 : begin
							Actions.FogRevealCircle(0,242,219,18)
						end;//coal
					2 : begin
							Actions.FogRevealCircle(0,121,126,18)
						end;//corn
					3 : begin
							Actions.FogRevealCircle(0,49,102,15)//wood
						end;//wood
					5 : begin
							Actions.FogRevealCircle(0,62,126,15)//wood
						end;//barracks		
				end;
			end;
			VisitedLastVillage := true;
			for I := 0 to 3 do
				If VillageVisited[I] = false then 
					VisitedLastVillage := false;
		end;
end;

Procedure OnTickBuildAWall;
begin
	If States.GameTime = WallBuildingTime1 + 10 then 
		BuildAWall(-2,0);
	If States.GameTime = WallBuildingTime1 + 600 then 
		BuildAWall(0,0);
	If States.GameTime = WallBuildingTime1 + 1200 then 
		BuildAWall(1,0);
	If States.GameTime = WallBuildingTime1 + 1300 then 
		BuildAWall(-1,0);
	If States.GameTime = WallBuildingTime1 + 1500 then 
		BuildAWall(-4,0);
	If States.GameTime = WallBuildingTime1 + 1800 then 
		BuildAWall(2,0);
	If States.GameTime = WallBuildingTime1 + 2400 then 
		BuildAWall(3,0);
	If States.GameTime = WallBuildingTime1 + 2500 then 
		BuildAWall(-3,0);
		
	If States.GameTime = WallBuildingTime2 + 600 then 
		A.ShowMSG(0,'<$40>');
	If States.GameTime = WallBuildingTime2 + 1200 then 
		BuildAWall(0,1);
	If States.GameTime = WallBuildingTime2 + 1800 then 
		BuildAWall(7,1);
	If States.GameTime = WallBuildingTime2 + 2400 then 
		BuildAWall(1,1);
	If States.GameTime = WallBuildingTime2 + 3000 then 
		BuildAWall(2,1);
	If States.GameTime = WallBuildingTime2 + 3600 then 
		BuildAWall(3,1);
	If States.GameTime = WallBuildingTime2 + 4200 then 
		BuildAWall(4,1);
	If States.GameTime = WallBuildingTime2 + 4800 then 
		BuildAWall(5,1);
	If States.GameTime = WallBuildingTime2 + 5400 then 
		BuildAWall(6,1);
	If States.GameTime = WallBuildingTime2 + 6000 then 
		BuildAWall(8,1);
end;

Procedure OnTickRemoveAttacks;
begin
	//remove attack on player 6 after defeating the army
	If DefAttack[0] = false then 
		If (States.GameTime > AttacksTime[0]) and ((States.StatArmyCount(1) < 250)) then 
		begin		
			AttacksTime[0] := 9999999
			Actions.AIAttackRemoveAll(1);
			DefAttack[0] := true;
			QuestNow.QType := qDef6;
			A.ShowMSG(0, '<$219>' );
		end;
	If (PlayersAttacked[1].Defeated = false) and (States.StatHouseCount(1) < 15) then 
	begin
		PlayersAttacked[1].Defeated := true;
		OnPlayerDefeated(1);
	end;
		
	//remove attack on player 6 after player defeat
	If (PlayersAttacked[5].Defeated = false) and (States.StatHouseCount(5) < 8) then 
	begin	
		PlayersAttacked[5].Defeated:= true;
		Actions.AIAttackRemoveAll(1);
		A.ShowMSG(0, '<$218>' );
	end;
		
		
	//remove attack on hero by players 1 and 4
	If DefAttack[3] = false then 
		If (States.GameTime > AttacksTime[3]) and (EmissaryStats[4] = eNotAllied) and ((States.StatArmyCount(4) < 270) or (States.StatArmyCount(1) < 250)) then 
		begin		
			AttacksTime[3] := 9999999
			Actions.AIAttackRemoveAll(1);
			Actions.AIAttackRemoveAll(4);
			DefAttack[3] := true;
		end;
		
		
	//remove attack on hero by player 2
	If DefAttack[2] = false then 
		If (States.GameTime > AttacksTime[2]) and (EmissaryStats[1] = eNotAllied) and ((States.StatArmyCount(1) < 250)) then 
		begin		
			AttacksTime[2] := 9999999
			Actions.AIAttackRemoveAll(1);
			DefAttack[2] := true;
		end;
		
	//remove attack on player 7 by player 2
	If DefAttack[6] = false then 
		If (States.GameTime > AttacksTime[6]) and (States.StatArmyCount(1) < 250) then 
		begin		
			AttacksTime[6] := 9999999
			Actions.AIAttackRemoveAll(1);
			DefAttack[6] := true;
			SetNewMultiMessages([294,295],60,[],[])
			QuestNow.QType := qFormation1;
		end;
		
	//remove attack on player 7 after player defeat
	If (States.GameTime > AttacksTime[6]) then 
		If (PlayersAttacked[6].Defeated = false) and (States.StatHouseCount(6) < 30) then 
		begin	
			PlayersAttacked[6].Defeated:= true;
			Actions.AIAttackRemoveAll(1);
			A.ShowMSG(0, '<$274>' );
			QuestNow.QType := qFormation2;
			EmissaryTime[7] := States.GameTime + 600;
		end;
	
	//remove attack on player 2 by player 7
	If DefAttack[7] = false then 
		If (States.GameTime > AttacksTime[7]+100) and (States.StatArmyCount(6) < 216) then 
		begin		
			AttacksTime[7] := 9999999
			Actions.AIAttackRemoveAll(6);
			DefAttack[7] := true;
			A.AISoldiersLimit(6,-1);
			Actions.AIAttackAdd(6,true,0,90,1,1,1,1,true,attClosestBuildingFromStartPos,U.KMPoint(213,106))
			A.ShowMSG(0, 'Def attack 7' );
		end;
	//remove attack on player 7 by player 2 almost the end
	If DefAttack[8] = false then 
		If (States.GameTime > AttacksTime[8]+100) and (States.StatArmyCount(5) < 92) then 
		begin		
			AttacksTime[8] := 9999999
			Actions.AIAttackRemoveAll(6);
			DefAttack[8] := true;
			A.AISoldiersLimit(5,-1);
			Actions.AIAttackAdd(5,true,0,90,1,1,1,1,true,attClosestBuildingFromStartPos,U.KMPoint(213,106))
			A.ShowMSG(0, '' );
			QuestNow.QType := qFormation1;
			QuestNow.QMadeTime[12] := States.GameTime+9000;
			
			If States.PlayerDefeated(2) and  States.PlayerDefeated(3) then 
				If QuestNow.QType in [qFormation1, qFormation2] then
				begin
					SetImmortality2(1,false);
					QuestNow.QMadeTime[12] := States.GameTime+ 3000;	
					UpgradeArmy(0,true);
					UpgradeArmy(4,true);
					UpgradeArmy(5,true);
					UpgradeArmy(6,true);
				end;
		end;
		
	//remove attacks after player defeat
	If (PlayersAttacked[0].Defeated = false) and (PlayerBuildingsDestroyed >= 20) then 
	begin	
		PlayersAttacked[0].Defeated:= true;	
		RemoveAttackToMultiPL([1,4,5,6])
	end;
	
	
	//remove 4,5,6 attack	with player 2 help	
	If EmissaryStats[1] = eHelping then 
		If DefAttack[4] = false then			
			If ((EmissaryStats[4] = eAttacking) and (EmissaryStats[5] = eAttacking) and (EmissaryStats[6] = eAttacking)) then 
				If States.GameTime > AttacksTime[4] then
					If (PlayersAttacked[0].Defeated = false) and (GetArmyCountMultiPL([4,5,6]) < 40) then 
					begin	
						DefAttack[4] := true;
						AttacksTime[4] := 9999999;
						EmissaryStats[1] := eAllied;
						EmissaryStats[4] := eDefended;
						EmissaryStats[5] := eDefended;
						EmissaryStats[6] := eDefended;
						AttacksTime[5] := States.GameTime + 300;
						RemoveAttackToMultiPL([4,5,6])
						Actions.AIStartPosition(6,190,204)	
					end;
				
	//remove 4,5,6 attack with player 2 allaince but no help
	If EmissaryStats[1] = eAllied then 
	If DefAttack[4] = false then		
		If (EmissaryStats[4] = eAttacking) and (EmissaryStats[5] = eAttacking) and (EmissaryStats[6] = eAttacking) then 
			If States.GameTime > AttacksTime[4] then
				If (PlayersAttacked[0].Defeated = false) and (GetArmyCountMultiPL([4,5,6]) < 40) then 
				begin
					A.ShowMSG(0, 'Groton : No one can be better than me!!!')
					DefAttack[4] := true;
					EmissaryStats[0] := eAttacking;
					EmissaryStats[4] := eDefended;
					EmissaryStats[5] := eDefended;
					EmissaryStats[6] := eDefended;
					AttacksTime[4] := 9999999;
					RemoveAttackToMultiPL([4,5,6])
					PlayersAttacked[0].AttackedTime := States.GameTime + 2400;
					Actions.AIStartPosition(6,190,204)	
				end;	
				
end;

Procedure OnTickAttacks;
begin
	//attacks	
	If States.GameTime = HousesFirstBuilt[2].aTime + 300 then
		AllAttacks(0);
		
	If States.GameTime = HousesFirstBuilt[5].aTime + 500 then
		AllAttacks(1);

	If States.GameTime = AttacksTime[0] then
		AllAttacks(2);
	If States.GameTime = AttacksTime[2] then
		AllAttacks(3);
	If States.GameTime = AttacksTime[3] then
		AllAttacks(4);
	If States.GameTime = AttacksTime[4] then
		AllAttacks(5);
		
	If States.GameTime = AttacksTime[5] then
		AllAttacks(6);
	If States.GameTime = AttacksTime[5]+6000 then
		AllAttacks(6);
		
	If States.GameTime = AttacksTime[6] then
		AllAttacks(7);
	//If States.GameTime = AttacksTime[6]+ 600 then
	//	AllAttacks(7);
		
		
		
	If States.GameTime = AttacksTime[7] then
		AllAttacks(8);
		
		
	If States.GameTime = AttacksTime[8]-10 then
		AllAttacks(9);
		
	If States.GameTime = AttacksTime[8]+150 then
		AllAttacks(9);
		
	If States.GameTime = AttacksTime[8]+450 then
		AllAttacks(9);
		
	If States.GameTime = AttacksTime[8]+750 then
		AllAttacks(9);
		
	If States.GameTime = AttacksTime[9]+6000 then
		AllAttacks(10);
	If States.GameTime = AttacksTime[10]+2000 then
		AllAttacks(11);
		
	If States.GameTime = AttacksTime[11] then
		AllAttacks(12);
		
	If States.GameTime = PlayersAttacked[5].AttackedTime then 
		AttackAfterAttack(5);
		
	//normal attacks
	
	If Player2Attacks then
		If States.GameTime mod 18000 = 0 then
			RandomTime := States.GameTime + States.KaMRandomI(18000);
	 
	If not (QuestNow.QType in QuestSet) then 
		If States.GameTime = RandomTime then 
				NormalAttacks;
end;

Procedure OnTickBonuses;
var I, aHouse : Integer;
begin
	If ((EmissaryStats[4] = eNone) and (EmissaryStats[5] = eNone) and (EmissaryStats[6] = eNone)) then 
	If not HousesFirstBuilt[0].Once then 
		If (HousesFirstBuilt[0].aType = -1) then 
			If States.GameTime mod 50 = 0 then 
				If U.InAreaI(States.UnitPositionX(Hero),States.UnitPositionY(Hero),58,64,90,76) then 
				begin
					HousesFirstBuilt[0].Once := true;
					Actions.ShowMSG(0,'<$391>');
					for I := 1 to 3 do 
						Actions.PlayerAllianceChange(0,I,true,true);
					for I := 7 to 10 do 
						Actions.PlayerAllianceChange(0,I,true,true);
					for I := 4 to 6 do 
						Actions.PlayerAllianceChange(0,I,true,false);
					Win.WinTime := States.GameTime + 300
					Win.WinType := w1;
				end;
				
				
	//hero not hungry
	If HeroNotHungry then 
		If States.GameTime mod 1200 = 0 then 
			Actions.UnitHungerSet(Hero,S.UnitMaxHunger);
			
	//start warrior equipping
	If States.GameTime mod 400 = 0 then EquipWarrior;
	//end warrior equipping
		
	//auto feed
	If States.GameTime mod 9000 = 0 then AutoFeed;
	//woodcuter's bonus			
	If HousesFirstBuilt[1].aType = 9 then 
		If States.GameTime mod 1800 = 0 then
			WoodcutterBonus(10,HousesFirstBuilt[1].Pos);
						
	//metalurgists
	If HousesFirstBuilt[9].aType = 15 then 
		If States.GameTime mod 18000 = 0 then
				Actions.GiveWares(0,7,States.StatHouseCount(0) div 2);
			
	If (HousesFirstBuilt[1].aType = 6) then 
		If States.GameTime mod 300 = 0 then
			If duckIndex <= high(Ducks) then 
				If U.InAreaI(aHeroPos.X,aHeroPos.Y,28,202,40,215) then 
				begin
					If duckIndex = 0 then 
						SetNewMultiMessages([36],60,[],[]);
					If duckIndex = high(Ducks) then 
						SetNewMultiMessages([37],60,[],[]);
						
					Actions.GiveWares(0,14,1);
					Actions.UnitKill(Ducks[duckIndex],true);
					duckIndex := duckIndex+1;
				end;
				
	If States.GameTime mod 100 = 0 then
	begin
		//all bonuses
		for I := low(HousesFirstBuilt) to High(HousesFirstBuilt) do
			If States.GameTime = HousesFirstBuilt[I].aTime + 300 then
				SetBonus(I);
				
		begin
			aHouse := States.HouseAt(aHeroPos.X,aHeroPos.Y-1);
			If aHouse = -1 then
				Exit;
			SetBonusNearHouse(aHouse);
			SetTradingMode(aHouse);
		end;
						
	end;
	
	If UnlimitedFishes then 
		If States.GameTime mod 100 = 0 then
			If States.UnitAt(33,209)  <=0 then 
			begin
				Actions.GiveAnimal(31,33,209);
				Actions.GiveAnimal(31,157,224);
			end;
			
end;

Procedure OnWarriorEquipped(aUnit,aGroup:Integer);
var aOwner,I,aX,aY: Integer;
	UnitCost:array of Integer;
begin
	aOwner:= States.UnitOwner(aUnit);
	If aOwner = 0 then
		If not HousesFirstBuilt[5].Once then 
			If HousesFirstBuilt[5].aType = 29 then 
				If States.UnitType(aUnit) = 15 then	
				begin
					HousesFirstBuilt[5].Once := true;
					Actions.PlayerAllianceChange(0, 6,true, false)
					Actions.PlayerAllianceChange(0, 6,false, true)
				end;
	If aOwner = 0 then
		If FreeUnitsToEquip > 0 then 
		begin
			If States.UnitType(aUnit)  < 23 then 
			begin
				aX := States.UnitPositionX(aUnit)
				aY := States.UnitPositionY(aUnit)
				UnitCost := GetUnitCosts(States.UnitType(aUnit));
				for I := low(UnitCost) to high(UnitCost) do
					Actions.HouseAddWaresTo(States.HouseAt(aX,aY-1),UnitCost[I],1);
				FreeUnitsToEquip := FreeUnitsToEquip - 1;
			end else
			begin
				aX := States.UnitPositionX(aUnit)
				aY := States.UnitPositionY(aUnit)
				UnitCost := GetUnitCosts(States.UnitType(aUnit));
				Actions.HouseAddWaresTo(States.HouseAt(aX,aY-1),7,UnitCost[0]);
				FreeUnitsToEquip := FreeUnitsToEquip - 1;
			end;			
		end;
	If aOwner = 5 then
		If aUnit = 16 then
			if States.KaMRandomI(100) >= 90 then 
				A.GiveGroup(aOwner, 26, States.UnitPositionX(aUnit), States.UnitPositionY(aUnit)+2,4,1,1);
end;

Procedure OnUnitTrained(aUnit:Integer);
var aOwner,aX,aY: Integer;
begin
	aOwner:= States.UnitOwner(aUnit);
	If aOwner = 0 then
	begin
		If FreeUnitsToEquip > 0 then 
		begin
			If States.UnitType(aUnit)  <= 13 then 
			begin
				aX := States.UnitPositionX(aUnit)
				aY := States.UnitPositionY(aUnit)
				Actions.HouseAddWaresTo(States.HouseAt(aX,aY-1),7,1);
				FreeUnitsToEquip := FreeUnitsToEquip - 1;
			end;
		end;
		OnUnitTrainedCoalVillage(aUnit);
	end;
end;

Procedure OnUnitAttacked(aUnit,aAttacker:Integer);
var aOwner, aOwner2  : Integer;
begin
	aOwner := States.UnitOwner(aUnit)
	aOwner2 := States.UnitOwner(aAttacker)
	If InstantKill[aOwner2] then 
		If aUnit <> Hero then 
			A.UnitKill(aUnit, false);
	If HousesFirstBuilt[2].aType = 17 then 	
		If HousesFirstBuilt[2].Once = true then 	
			If aOwner2 = 0 then 
				If aAttacker = S.HouseWorker(HousesFirstBuilt[2].ID) then 
					A.UnitKill(aUnit,false);
				
	If QuestNow.QType = qNone then 	
		If aAttacker > 0 then
			If (aOwner2 = 0) and ( aOwner = 5) then 
				If States.PlayerAllianceCheck(aOwner,aOwner2) then
				begin
					QuestNow.QType := qFFA;
					A.ShowMSG(0,'<$236>');
					QuestNow.QMadeTime[1] := States.GameTime;
					Actions.PlayerAllianceChange(aOwner2,aOwner,true,false);
					Actions.AIStartPosition(5,70,188);
					Actions.AIAttackAdd(5,true,0,60,1,1,1,1,true,attClosestBuildingFromStartPos,U.KMPoint(213,106))
				end;
	If (aOwner2 = 0) and (aOwner = 4) and (EmissaryStats[4] = eNotAllied) then 
	begin		
		Actions.ShowMSG(0,'<$233>')
		EmissaryStats[4] := eAttacking;
		AttacksTime[3] := States.GameTime + 300;
	end;
	If QuestNow.QType = qFFA1 then 
		If aOwner <> 0 then 
		begin
			QuestNow.QType := qFFA;
			A.ShowMSG(0,'<$236>');
			QuestNow.QMadeTime[1] := States.GameTime;
		end;
	
end;

//rebuilding houses after destroing them, only worst enemy
Procedure OnHouseAfterDestroyed(aType,aOwner,X,Y : Integer);
begin
	If not HouseDestroyedByScript then 
		If aOwner = 0 then 		
			If VillageQuestGiver[2].QEventType = 8 then
				If aType = 28 then
					If U.InAreaI(X,Y,107,114,133,134) then 
						If States.HouseAt(X,Y) = -1 then 
							A.GiveHouseSite(0,28,X,Y,true);
				
	If aOwner = 1 then Actions.PlanAddHouse(aOwner,aType,X,Y);
	
	If HouseDestroyedByScript then 
		HouseDestroyedByScript := false;
end;

//rebuilding houses after destroing them, only worst enemy
Procedure OnHouseDestroyed(aHouse,aDestroyer : Integer);
var aOwner : Integer;
	aPos : TKMPoint;
begin	
	aOwner := States.HouseOwner(aHouse);
	aPos := States.HousePosition(aHouse);
	If aOwner = -1 then Exit;
	If (aDestroyer <> 0) and (aDestroyer <> 16) and (aOwner=0) then 
		PlayerBuildingsDestroyed := PlayerBuildingsDestroyed+1;
		
	If (aOwner = 8) or (aOwner = 2) then 
		If QuestNow.QType = qLeftGarrison then 
			If AttacksTime[8] = 9999999 then
			begin
				AttacksTime[8] := States.GameTime + 1200;
				A.ShowMSG(0,'<$335>');
				QuestNow.QType := qFormation1;
				QuestNow.QMadeTime[12] := States.GameTime+18000;
			end;
end;


//you can place road at player 7 location
Procedure OnPlanFieldPlaced(aPlayer,X,Y :Integer);
begin
	
	If aPlayer = 0 then	
	begin		
		If not U.InAreaI(X,Y,0,150,94,255) then
			Actions.PlanRemove(0,X,Y);
		If VillageQuestGiver[2].QEventType = 5 then
			If QuestInteger[5] < 20 then 
				If U.InAreaI(X,Y,107,114,133,134) then 
					A.PlanAddField(0,X,Y);
		
	end;
end;

Procedure OnFieldBuilt(aPlayer,X,Y :Integer);
begin
	
	If VillageQuestGiver[2].QEventType = 5 then
		If aPlayer = 0 then	
				If U.InAreaI(X,Y,107,114,133,134) then 
					If QuestInteger[5] < 20 then 
					begin					
						QuestInteger[5] := QuestInteger[5] + 1;
						If QuestInteger[5] = 20 then 
						begin
							A.ShowMSG(0,'<$629>');
							QuestTasks[2][1] := true;	
							QuestInteger[5] := 0;
						end;
					end;
end;

Procedure OnPlanRoadPlaced(aPlayer,X,Y :Integer);
var aOutIndex : Integer;
begin
	If aPlayer = 0 then	
	begin
		If U.InAreaI(X,Y,5,246,20,251) then
		begin
			case U.KMPoint(X,Y) of
				U.KMPoint(6,250) : aOutIndex := 0 ;
				U.KMPoint(8,250) : aOutIndex := 1 ;
				U.KMPoint(10,250) : aOutIndex := 2 ;
				U.KMPoint(12,250) : aOutIndex := 3 ;
				U.KMPoint(14,250) : aOutIndex := 4 ;
				U.KMPoint(16,250) : aOutIndex := 5 ;
				
				U.KMPoint(8,247) : aOutIndex := 6 ;
				U.KMPoint(14,247) : aOutIndex := 7 ;
			end;
			A.PlanRemove(0,X,Y);
			If States.UnitIdle(Hero) then
				ChangeInventoryItem(aOutIndex);
		end;
		If U.InAreaI(X,Y,110,151,242,243) then
		begin			
			If not QuestTasks[4][1] then 
			begin
				If VillageQuestGiver[4].QEventType = 2 then 
					If States.GameTime > VillageQuestGiver[4].QEndTime then 
						QuestInteger[6] := QuestInteger[6] + 1;
				If QuestInteger[6] = 30 then 
					QuestTasks[6][1] := true;
			end;
			Actions.PlanRemove(0,X,Y);
			Actions.PlanAddRoad(6,X,Y);
		end;
		
		If not U.InAreaI(X,Y,0,139,109,255) and not U.InAreaI(X,Y,110,151,242,243) then
		begin
			Actions.PlanRemove(0,X,Y);
		end;
		
		If HousesFirstBuilt[5].Trading then 
			If  U.InAreaI(X,Y,6,237,19,243) then
			begin	
				If States.MapTileType(X,Y) = 28 then 
				begin
					A.ShowMSG(0, '<$169>');
				end else
				begin
					case X of
						6 : aOutIndex := 0;
						8 : aOutIndex := 1;
						10 : aOutIndex := 2;
						12 : aOutIndex := 3;
						14 : aOutIndex := 4;
						16 : aOutIndex := 5;
					end;		
					If States.HouseResourceAmount(MainStoreHouse[0],7) > GetItemCost(RandomItems[aOutIndex]) then
					begin
						A.ShowMSG(0, '<$170>' + GetItemName(RandomItems[aOutIndex]));
						GiveItemFromID(RandomItems[aOutIndex]);
						A.HouseTakeWaresFrom(MainStoreHouse[0],7,GetItemCost(RandomItems[aOutIndex]));
					end else
						A.ShowMSG(0, '<$171>');
						
				end;	
				for aOutIndex := 0 to 5 do
					RandomItems[aOutIndex] := 0;	
					
				HousesFirstBuilt[5].Trading := false;
				HousesFirstBuilt[5].aDelay := States.GameTime + 12000;
				Actions.PlanRemove(0,X,Y);
			end;
	end;
end;

//place house on specific area
Procedure OnPlanWinefieldPlaced(aPlayer,X,Y :Integer);
begin
	If aPlayer = 0 then	
	begin
		If not U.InAreaI(X,Y,0,150,94,255) then
		begin
			Actions.PlanRemove(0,X,Y);
		end;
		If not QuestTasks[2][1] then 
			If VillageQuestGiver[2].QEventType = 8 then
				If QuestInteger[5] < 16 then 
					If U.InAreaI(X,Y,107,114,133,134) then 
					begin
						QuestInteger[5] := QuestInteger[5] + 1;
						A.PlanAddWineField(0,X,Y);
					end;
	end; 
end; 

Procedure OnWinefieldBuilt(aPlayer,X,Y :Integer);
begin
	
	If VillageQuestGiver[2].QEventType = 8 then
		If aPlayer = 0 then	
				If U.InAreaI(X,Y,107,114,133,134) then 
					If QuestInteger[3] < 16 then 
					begin					
						QuestInteger[3] := QuestInteger[3] + 1;
						If QuestInteger[3] = 16 then 
						begin
							QuestTasks[2][1] := true;	
							QuestInteger[3] := 0;
							If QuestTasks[2][1] and QuestTasks[2][0] then
								A.ShowMSG(0, '<$629>');
						end;
					end;
end;
//place road on specific area
Procedure OnHousePlanPlaced(aPlayer,X,Y, aType :Integer);
begin
	If aPlayer = 0 then	
	begin
		If not U.InAreaI(X,Y,0,139,94,255) then
		begin
			Actions.PlanRemove(0,X,Y);
		end;
	
		If VillageQuestGiver[2].QEventType = 8 then
			If aType = 28 then
				If QuestInteger[4] < 2 then 
					If U.InAreaI(X,Y,107,114,133,134) then 
					begin
						QuestInteger[4] := QuestInteger[4] + 1;
						A.GiveHouseSite(0,28,X,Y,true);
						A.PlanConnectRoad(13, X,Y+1, 121,127,true);
					end;
	end; 
end; 

//debug, killing group for testing
Procedure OnBeacon(aPlayer,X,Y :Integer);
begin
	If not InCinematic then 
		If States.GameTime > BeaconSetTime then 
			If States.GroupAt(X,Y) <= 0 then 
				If not States.UnitDead(Hero) then 
					If States.UnitIdle(Hero) then 
					begin
						BeaconSetTime := States.GameTime + 600;
						StartCinematic(0,States.UnitDirection(Hero));
						StartCinematic(1,States.UnitDirection(Hero));
					end;
	//If S.HouseAt(X,Y) > 0 then
	//	A.HouseDestroy(S.HouseAt(X,Y), false);
	//If States.GroupAt(X,Y) > 0 then
	//	Actions.GroupKillAll(States.GroupAt(X,Y),false);
	//Actions.GiveGroup(6,15,X,Y,0,1,1)
	//HousesToBuild[6] := HousesToBuild[6]+2;
end;

Procedure OnMissionStartTesting;
begin	
	//HousesFirstBuilt[5].aTime := States.GameTime;
	//HousesFirstBuilt[5].aType := 29 ;
	//AttacksTime[0] := States.GameTime + 1200;
	//AttacksTime[1] := States.GameTime + 1200;
	//AttacksTime[2] := States.GameTime + 1200;
	//AttacksTime[3] := States.GameTime + 1200;
	//AttacksTime[5] := States.GameTime + 1200;

	//emissary 4,5,6
	//EmissaryStats[0] := eNone;
	//EmissaryStats[1] := eAllied;
	//EmissaryTime[0] := 1200;	
	//for I := 1 to 6 do
	//		EmissaryTime[I] := 9999998;
			
	//PlayersAttacked[0].AttackedTime := States.GameTime + 1200;
	//OnCoalMineBuilt;
	//WarriorsOff := true;
	//FreeUnitsToEquip := 10;
	//OnIronMineBuilt;
	//A.ShowMSG(0,IntToStr(S.StatHouseCount(6)));
	//QuestNow.QType := qServes;
	//QuestNow.aTime := S.GameTime + 100;
	
	//QuestNow.QType := qFFA1;
	//QuestNow.QType := qFFA;
	//QuestNow.QMade[1] := false;
	//QuestNow.QMadeTime[1] := States.GameTime;
	//poœrednicy
	//QuestNow.QMadeTime[3] := States.GameTime;
	//QuestNow.QType := qTheChoice;
	
	//AttacksTime[8] := 300;
	
	//MinersToTrain := 12;
	//MinersKilled := 12;
	SetImmortality2(0,true);
	InstantKill[0] := true;
end;

procedure OnTickTesting;
begin
	//If States.GameTime mod 1000 = 0 then 
	//	SetNewMultiMessages([0],60,[],[]);
		
end;

Procedure OnTick;
var I : Integer;
begin
	OnTickBonuses;
	OnTickAttacks;
	OnTickTesting;
	OnTickBuildAWall;
	OnTickVillageReaveling;
	OnTickRemoveAttacks;
	OnTickVillages;
	
	If States.GameTime = TimeGroup + 1 then 
		GiveFinGroup;
		
		
	If States.GameTime mod 5 = 0 then 
		If States.HouseRepair(MainStoreHouse[0]) and (ShowStatsOrPlayers[1] = 0) then 
		begin
			ShowStatsOrPlayers[0] := ShowStatsOrPlayers[0] + 1;
			ShowStatsOrPlayers[1] := 1;
			If ShowStatsOrPlayers[0] = 4 then 
				ShowStatsOrPlayers[0] := 0;
		end else
		If not States.HouseRepair(MainStoreHouse[0]) and (ShowStatsOrPlayers[1] = 1) then 
		begin
			ShowStatsOrPlayers[0] := ShowStatsOrPlayers[0] + 1;
			ShowStatsOrPlayers[1] := 0;
			If ShowStatsOrPlayers[0] = 4 then 
				ShowStatsOrPlayers[0] := 0;
		end;
		
	
		
	If Length(Patrolls) > 0 then 
		If States.GameTime mod 600 = 0 then
			for I := 0 to High(Patrolls) do	
				If not States.GroupDead(Patrolls[I].aID) and States.GroupIdle(Patrolls[I].aID) then 
				begin
					If Patrolls[I].aMode then 
						A.GroupOrderWalk(Patrolls[I].aID, Patrolls[I].aPos2.X,Patrolls[I].aPos2.Y,S.KamRandomI(7))
					else
						A.GroupOrderWalk(Patrolls[I].aID, Patrolls[I].aPos1.X,Patrolls[I].aPos1.Y,S.KamRandomI(7));
						
					Patrolls[I].aMode := not Patrolls[I].aMode;
				end;
		
	If length(Ruins) > 0 then 
		If States.GameTime mod 1200 = 0 then 
			for I := 0 to high(Ruins) do
			If U.InAreaI(aHeroPos.X,aHeroPos.Y, Ruins[I].X-1, Ruins[I].Y-1, Ruins[I].X+1, Ruins[I].Y+1) then 
			begin
				GiveRandomFromRuins;
				Ruins := PointArrayRemoveIndex(Ruins, [I]);
			end;
	
	If HeroInventory[0][SlotID[0]].Name = 'Pickaxe' then  
		If States.GameTime mod 600 = 0 then 
			If U.ArrayHasElementI(States.MapTileObject(aHeroPos.X,aHeroPos.Y-1),[8,9]) then
			begin
				A.MapTileObjectSet(aHeroPos.X,aHeroPos.Y-1,255);
				A.GiveWares(0, 1, States.KaMRandomI(3)+1);
				A.ShowMSG(0, '<$88>');
			end;
	
	If HeroInventory[0][SlotID[0]].Name = 'Woodcutter`s Axe' then  
		If States.GameTime mod 200 = 0 then 
			If U.InRangeI(States.MapTileObject(aHeroPos.X,aHeroPos.Y), 88, 206) then
			begin
				A.MapTileObjectSet(aHeroPos.X,aHeroPos.Y,255);
				A.GiveWares(0, 0, States.KaMRandomI(3)+1);
				A.ShowMSG(0, '<$90>');
			end;
			
	//covering the world at start 
	If States.GameTime mod 600 = 0 then
	begin
		AddStoneToTowers(8);
		AddStoneToTowers(9);
	end;
		
	If States.GameTime mod 50 = 0 then 
	begin
		If ScannerOn = false then
			If HeroInventory[2][SlotID[2]].Name = 'Scanning Glasses' then  
			begin
				ScannerOn := true;
				A.HouseAllowAllyToSelectAll(-1,true);
			end;
			
		If ScannerOn = true then
			If HeroInventory[2][SlotID[2]].Name <> 'Scanning Glasses' then  
			begin
				ScannerOn := false;
				A.HouseAllowAllyToSelectAll(-1,false);
			end;
	end;
	
	If States.GameTime = 1 then 
	begin
		Actions.FogCoverAll(0);
		Actions.FogRevealCircle(0,45,208,10);
		Actions.FogRevealCircle(0,190,203,10);
		Actions.FogRevealCircle(0,51,207,10);
		Actions.FogRevealRect(0,3,244,18,252);
		//Actions.FogRevealAll(0);
		HeroStats[0].Health := HPmax;
	end;
		
	If States.UnitDead(Hero) then Actions.PlayerDefeat(0);
	If States.HouseDestroyed(MainStoreHouse[0]) then Actions.PlayerDefeat(0);
	
	If CavarlyGroup > 0 then
		If States.GroupIdle(CavarlyGroup) then
		begin
			Actions.GiveGroup(0,22,States.UnitPositionX(States.GroupMember(CavarlyGroup,0)),States.UnitPositionY(States.GroupMember(CavarlyGroup,0)),5,12,4);
			Actions.GroupKillAll(CavarlyGroup,true);
			CavarlyGroup:=-1;
		end;
		
	If States.GameTime = 600 then 
		A.ShowMSG(0,'<$120>');
		
	If States.GameTime = 18000 then 
		A.ShowMSG(0,'<$690>');
		
	If States.GameTime = 800 then 
	begin
		A.ShowMSG(0,'<$121>');
		VillageQuestGiver[4].QTime := States.GameTime;
		VillageQuestGiver[4].QEventType := 1;
	end;
	If States.GameTime = 2400 then 
		A.ShowMSG(0,'<$125>');
	
	If not S.UnitDead(Hero) then 
		If States.UnitHunger(Hero) < 10 then 
		begin
			A.ShowMSG(0,'Your hero died by hunger.');		
			Actions.UnitHpSetInvulnerable(Hero,false);
			Actions.UnitKill(Hero,false);
		end;
		
	If QuestNow.QType = qDef6 then 
	begin
		QuestNow.QType := qTheChoice;
		QuestNow.QMadeTime[3] := States.GameTime + 1200;
	end;
	If States.GameTime = QuestNow.QMadeTime[3] then 
	begin
		QuestNow.QMade[3] := true;
		A.ShowMSG(0,'<$207>');
		A.GroupOrderWalk(A.GiveGroup(0,15,228,116,6,9,3),66,184,1);
		A.GroupOrderWalk(A.GiveGroup(0,15,236,110,6,12,4),70,186,1);
		A.GroupOrderWalk(A.GiveGroup(0,17,219,101,6,12,4),66,189,1);
		BuildOnDef61;
	end;
	If States.GameTime = QuestNow.QMadeTime[3]+12000 then 
		BuildOnDef62;
	
		
	If QuestNow.QType = qNone then 
		If (EmissaryStats[4] = eAttacking) or (EmissaryStats[4] = eDefended) then 
			If States.GameTime mod 50 = 0 then 
				CheckGroupsAtArea(0);
				
	If QuestNow.QType = qFFA then
	begin
		If States.GameTime = QuestNow.QMadeTime[1]+50 then 
			A.ShowMSG(0,'<$237>');
		If States.GameTime = QuestNow.QMadeTime[1]+100 then 
			A.ShowMSG(0,'<$238>');
		If States.GameTime = QuestNow.QMadeTime[1]+150 then 
			A.ShowMSG(0,'<$239>');
			
			
		If States.GameTime = QuestNow.QMadeTime[1]+450 then 
			A.ShowMSG(0,'<$240>');
		If States.GameTime = QuestNow.QMadeTime[1]+500 then 
			A.ShowMSG(0,'<$241>');
		If States.GameTime = QuestNow.QMadeTime[1]+530 then 
			A.ShowMSG(0,'<$242>');
		If States.GameTime = QuestNow.QMadeTime[1]+570 then 
			A.ShowMSG(0,'<$243>');
		If States.GameTime = QuestNow.QMadeTime[1]+610 then 
			A.ShowMSG(0,'<$244>');	
	end;	
	
	
	
	If Win.WinType = w1 then
	begin
		If States.GameTime = Win.WinTime then
			A.ShowMSG(0, '<$392>');
			
		If States.GameTime = Win.WinTime + 100 then
			A.PlayerWin([0], true);
	end;
		
	If Win.WinType = w9 then
	begin
		If States.GameTime = Win.WinTime + 20 then
			A.ShowMSG(0, '<$304>');
			
		If States.GameTime = Win.WinTime + 160 then
			A.ShowMSG(0, '<$305>');
			
			
		If States.GameTime = Win.WinTime + 170 then
		begin
			A.FogCoverAll(0);
			A.CinematicStart(0);
			A.CinematicPanTo(0, 125, 125,0);
		end;
		
		If States.GameTime = Win.WinTime + 250  then
			A.ShowMSG(0, '<$306>');
		If States.GameTime = Win.WinTime + 280  then
			A.ShowMSG(0, '<$307>');
		If States.GameTime = Win.WinTime + 310 then
			A.ShowMSG(0, '<$308>');
		If States.GameTime = Win.WinTime + 350 then
			A.ShowMSG(0, '<$309>');
		If States.GameTime = Win.WinTime + 390 then
			A.ShowMSG(0, '<$310>');
		If States.GameTime = Win.WinTime + 440 then
			A.ShowMSG(0, '<$311>');
		If States.GameTime = Win.WinTime + 480 then
			A.ShowMSG(0, '<$312>');
		If States.GameTime = Win.WinTime + 520 then
			A.ShowMSG(0, '<$313>');
		If States.GameTime = Win.WinTime + 560 then
			A.ShowMSG(0, '<$314>');
		If States.GameTime = Win.WinTime + 600 then
			A.ShowMSG(0, '<$315>');
		If States.GameTime = Win.WinTime + 640 then
			A.ShowMSG(0, '<$316>');
		If States.GameTime = Win.WinTime + 670 then
			A.ShowMSG(0, '<$317>');
		If States.GameTime = Win.WinTime + 700 then
			A.ShowMSG(0, '<$318>');
		If States.GameTime = Win.WinTime + 800 then
			A.PlayerWin([0],true);
	end;
	If Win.WinType = w8 then
	begin
		If States.GameTime = Win.WinTime + 20 then
			A.ShowMSG(0, '<$292>');
			
		If States.GameTime = Win.WinTime + 160 then
			A.ShowMSG(0, '<$293>');
		
		If States.GameTime = Win.WinTime + 170 then
		begin
			A.FogCoverAll(0);
			A.CinematicStart(0);
			A.CinematicPanTo(0, 125, 125,0);
		end;
		
		If States.GameTime = Win.WinTime + 250 then
			A.PlayerWin([0],true);
	end;
	If States.GameTime = 6000 then
		A.ShowMSG(0, '<$383>');
		
	If MultiMessages.aIndex <= High(MultiMessages.aShowArray) then
		If States.GameTime mod MultiMessages.aModTime = 0 then 
			ShowMultiMessages(MultiMessages.aIndex,MultiMessages.aShowArray);
	
	If States.GameTime mod 600 = 0 then 
	begin
		for I := 0 to high(UnlimitedCoalPoints) do 
			A.MapTileSet(UnlimitedCoalPoints[I].X,UnlimitedCoalPoints[I].Y,155,0);
		
		for I := 0 to high(UnlimitedIronPoints) do 
			A.MapTileSet(UnlimitedIronPoints[I].X,UnlimitedIronPoints[I].Y,151,0);
			
		for I := 0 to high(UnlimitedGoldPoints) do 
			A.MapTileSet(UnlimitedGoldPoints[I].X,UnlimitedGoldPoints[I].Y,147,0);
	end;
			
	
	If not BarbariansVisited then
		If States.FogRevealed(0, 21,97) or
			States.FogRevealed(0, 24,81) or
			States.FogRevealed(0, 11,84) then
			begin
				BarbariansVisited := true;
				A.ShowMSG(0, '<$385>');
			end;	
			
	If not HousesFirstBuilt[0].Once then
		If States.GameTime = HousesFirstBuilt[0].aTime + 6000 then 
			A.ShowMSG(0,'<$386>');
			
	If States.GameTime = HousesFirstBuilt[0].aTime + 15000 then 
		A.ShowMSG(0,'<$148>');
			
	If CheckTime(EmissaryTime[7]) then 
			A.ShowMSG(0,'<$390>');
	If States.GameTime = PlayersAttacked[11].DefeatedTime then 
	begin
		SetNewMultiMessages([152],60,[51,54],[]);
		
		A.AIEquipRate(2,1,S.AIEquipRate(2,1) - 100);
		A.AIEquipRate(3,1,S.AIEquipRate(3,1) - 100);
		
	end;
	
	If States.GameTime = PlayersAttacked[14].DefeatedTime then 
	begin
		SetNewMultiMessages([153],60,[52,53],[]);
		
		A.AIEquipRate(2,1,S.AIEquipRate(2,1) - 200);
		A.AIEquipRate(3,1,S.AIEquipRate(3,1) - 200);
		A.AIAttackRemoveAll(6);		
		Actions.AIAttackAdd(6,true,1,45,1,1,1,1,true,attClosestBuildingFromArmy,U.KMPoint(213,106))
		If PlayersAttacked[11].Defeated then 
		begin
			A.AIAttackRemoveAll(6);
			Actions.AIAttackAdd(6,true,1,60,1,1,1,1,true,attClosestBuildingFromArmy,U.KMPoint(213,106))
		end;
	end;
	If not Meriton then 
		If PlayersAttacked[12].Defeated then 
			If States.GameTime >= PlayersAttacked[12].DefeatedTime then 
			begin
				If States.GameTime = PlayersAttacked[12].DefeatedTime then 
				begin
					MeritonSword := A.GiveGroup(9,27,38,172,4,1,1);
					GroupHpInvulnerableSet([MeritonSword],true);		
					A.ShowMSGGoTo(0, 38,172,'<$162>');
				end;
				If States.GameTime mod 100 = 0 then 
					If aHeroPos = Point(38,174) then 
						begin
							Meriton := true;
							StartCinematic(0,0);
							StartCinematic(1,0);
							SetNewMultiMessages([155,156,157,158,159,160],60,[55],[MeritonSword]);					
						end;
			end;
		
end;

procedure OnMissionStartSetMainStoresAndHero;
begin
	Hero := States.UnitAt(28,217);
	MainStoreHouse[0] := States.HouseAt(51,207);
	MainStoreHouse[1] := States.HouseAt(64,14);
	MainStoreHouse[2] := States.HouseAt(19,37);
	MainStoreHouse[3] := States.HouseAt(173,13);
	MainStoreHouse[4] := States.HouseAt(220,35);
	MainStoreHouse[5] := States.HouseAt(213,106);
	MainStoreHouse[6] := States.HouseAt(190,203);
	MainStoreHouse[7] := States.HouseAt(64,14);
	MainStoreHouse[8] := States.HouseAt(64,14);
	MainStoreHouse[9] := States.HouseAt(64,14);
	MainStoreHouse[10] := States.HouseAt(64,14);
	MainStoreHouse[11] := States.HouseAt(47,104);
	MainStoreHouse[13] := States.HouseAt(143,242);
	MainStoreHouse[14] := States.HouseAt(237,228);
	
	THPos := U.KMPoint(100,20);
	A.HouseTownHallMaxGold(States.HouseAt(THPos.X,THPos.Y),999);
	A.HouseAddWaresTo(States.HouseAt(THPos.X,THPos.Y),7,999);
	BarracksPos := U.KMPoint(93,18);
	Actions.UnitHpSetInvulnerable(Hero,true);
end;

procedure OnMissionStartSetArmyCount;
var I :Integer;
begin
	//army count
	StartUnitCount[1].Warr := States.StatUnitTypeCount(1,16);
	StartUnitCount[1].Cav := States.StatUnitTypeCount(1,22);
	StartUnitCount[1].Cross := States.StatUnitTypeCount(1,18);
	StartUnitCount[1].Pike := States.StatUnitTypeCount(1,20);
	for I := 7 to 10 do
		begin
			StartUnitCount[I].Warr := States.StatUnitTypeCount(I,26);
			StartUnitCount[I].Cav := States.StatUnitTypeCount(I,22);
			StartUnitCount[I].Cross := States.StatUnitTypeCount(I,18);
			StartUnitCount[I].Pike := States.StatUnitTypeCount(I,20);
		end;
end;

procedure OnMissionStartSetAlliances;
var I, K :Integer;
begin
	Actions.PlayerAllianceChange(13, 0,false, true)
	
	for I := 1 to 17 do 
		for K := 1 to 17 do 			
			Actions.PlayerShareFogCompliment(I, K, false);
	for I := 0 to 17 do 	
			Actions.PlayerShareFogCompliment(I, 0, false);
			
	Actions.PlayerAllianceChange(5, 0,false, true);
	
	for I := 1 to 17 do
		A.FogCoverAll(I);
		
	Actions.PlayerAllianceChange(0,13,false,true);	
end;

Procedure OnMissionStartRuins;
var aHouses : array of Integer;
	LEA : Integer;
begin
	aHouses := States.PlayerGetAllHouses(16);
	SetLength(Ruins,length(aHouses));
	for LEA := high(aHouses) downto 0 do
	begin
		Ruins[LEA] := States.HousePosition(aHouses[LEA]);
		A.HouseDestroy(aHouses[LEA],false);
	end;
	//A.ShowMSG(0, IntToStr(length(Ruins)));
end;

Procedure OnMissionStartSetMaxTime;
var I :Integer;
begin
	for I := 0 to 27 do
		If not U.ArrayHasElementI(I, [1,2,7,8,10,13,27]) then 
		begin
			A.HouseWareBlock(MainStoreHouse[6], I, true);
			A.HouseWareBlock(MainStoreHouse[5], I, true);
		end;
	for I := low(AttacksTime) to high(AttacksTime) do 
		AttacksTime[I]:= 9999999;
		
	for I := low(HousesFirstBuilt) to High(HousesFirstBuilt) do
	begin
		HousesFirstBuilt[I].aType := -1;
		HousesFirstBuilt[I].aTime := 9999999;
		HousesFirstBuilt[I].VisTime := 9999999;
	end;
	
	for I := 0 to 7 do
		EmissaryTime[I] := 9999999;
		
	for I := Low(QuestNow.QMadeTime) to High(QuestNow.QMadeTime) do
		QuestNow.QMadeTime[I] := 9999999;
		
	QuestNow.QVStartTime := 9999999;
	WallBuildingTime1 := 999999	
	WallBuildingTime2 := 999999	
	Win.WinTime := 999999	
	
	PlayersFirstDefeated[0] := -1;
	PlayersFirstDefeated[1] := -1;
	PlayersFirstDefeated[2] := -1;
	PlayersFirstDefeated[3] := -1;
	
	
	VillageQuestGiver[0].QPontsToReveal := [Point(137,245),Point(132,230),Point(155,236),Point(144,240)];//fish
	VillageQuestGiver[1].QPontsToReveal := [Point(235,223),Point(243,216),Point(235,229),Point(251,215)];//coal
	VillageQuestGiver[2].QPontsToReveal := [Point(111,129),Point(121,130),Point(120,120),Point(121,155)];//corn
	VillageQuestGiver[3].QPontsToReveal := [Point(51,110),Point(60,105),Point(44,100),Point(52,90)];//forest
	//VillageQuestGiver[4].QPontsToReveal := [Point(51,110),Point(60,105),Point(44,100),Point(52,90)];//forest
	VillageQuestGiver[5].QPontsToReveal := [Point(68,119),Point(79,129),Point(67,123),Point(67,123)];//forest
end;


{$I KS_Commands.script}

Procedure OnMissionStart;
begin
	QuestSet := [qFormation1,qFormation2, qTheKing1, qTheKing2, qFFA]; 
	MultiMessages.aModTime := 50;
	SetDucksArray;
	
	OnMissionStartSetMainStoresAndHero;
	OnMissionStartSetAlliances;
	OnMissionStartSetArmyCount;	
	OnMissionStartSetMaxTime;
	OnMissionStartVillages;
	
	OnMissionStartRuins;

	OnMissionStartTesting;
	
	aPlayersUType[0] :=[26,20,18,22];//1
	aPlayersUType[1] :=[16,20,18,22];//2
	aPlayersUType[2] :=[16,20,18,22];//3
	aPlayersUType[3] :=[15,19,17,21];//4
	aPlayersUType[4] :=[14,19,17,27];//5
	aPlayersUType[5] :=[14,19,17,21];//6
	
	aPlayersGType[4] :=[0,1,2];//6
	aPlayersGType[5] :=[0,2];//6
	aPlayersGType[6] :=[0,2,3];//6
	aPlayersGType[13] :=[0,1,2,3];//6
	
	A.ShowMSG(0, '<$502>');
	A.ShowMSG(0, '<$503>');
	
	UnlimitedCoalPoints := [
	U.KMPoint(251,214),
	U.KMPoint(237,219),
	U.KMPoint(229,213),
	U.KMPoint(223,210),
	U.KMPoint(215,204),
	U.KMPoint(217,216),
	U.KMPoint(219,223),
	U.KMPoint(53,192),
	U.KMPoint(60,190),
	U.KMPoint(68,193),
	U.KMPoint(75,198),
	U.KMPoint(80,204),
	U.KMPoint(74,214),
	U.KMPoint(58,217),
	U.KMPoint(58,229),
	U.KMPoint(69,229),
	U.KMPoint(77,225),
	U.KMPoint(81,221),
	U.KMPoint(61,206),
	U.KMPoint(233,220),
	U.KMPoint(239,217),
	U.KMPoint(252,214)
	];
	
	
	UnlimitedIronPoints := [
	U.KMPoint(73,169),
	U.KMPoint(68,167),
	U.KMPoint(55,164),
	U.KMPoint(47,163),
	U.KMPoint(39,166),
	U.KMPoint(127,208),
	U.KMPoint(112,208),
	U.KMPoint(232,49),
	U.KMPoint(234,62),
	U.KMPoint(217,59),
	U.KMPoint(121,45),
	U.KMPoint(99,53),
	U.KMPoint(91,62),
	U.KMPoint(60,176),
	U.KMPoint(50,180),
	U.KMPoint(37,184)
	];
	
	UnlimitedGoldPoints := [
	U.KMPoint(221,85),
	U.KMPoint(238,87),
	U.KMPoint(228,91),
	U.KMPoint(211,92),
	U.KMPoint(95,24),
	U.KMPoint(82,31),
	U.KMPoint(78,24),
	U.KMPoint(179,177),
	U.KMPoint(161,186),
	U.KMPoint(78,140),
	U.KMPoint(62,141),
	U.KMPoint(50,140),
	U.KMPoint(41,139)
	];
	BarbarainsStartPositions := [
	U.KMPoint(167,84),
	U.KMPoint(30,68),
	U.KMPoint(158,120),
	U.KMPoint(160,171),
	U.KMPoint(60,195)
	];
	
	VillageVisited[4] := true;
	
	case States.MissionDifficulty of 
		0: 	begin
				DifficultyMultipiers[0] := 36000;//emissary time 1
				DifficultyMultipiers[1] := 50;//army
				DifficultyMultipiers[2] := 70;//army
			end;
		1: ;
		2: begin
				DifficultyMultipiers[0] := 40000;
				DifficultyMultipiers[1] := 80;
				DifficultyMultipiers[2] := 85;//army
			end;
		3: ;
		4: begin
				DifficultyMultipiers[0] := 18000;
				DifficultyMultipiers[1] := 100;
				DifficultyMultipiers[2] := 100;//army
			end;
		5: ;
		6: begin
				DifficultyMultipiers[0] := 9000;
				DifficultyMultipiers[1] := 120;
				DifficultyMultipiers[2] := 115;//army
			end;
		7: begin
				DifficultyMultipiers[0] := 6000;
				DifficultyMultipiers[1] := 150;
				DifficultyMultipiers[2] := 130;//army
			end;
	end;
	
	AddPatroll(13,14,1,1,Point(62,114),Point(105,109));
	AddPatroll(13,27,1,1,Point(68,129),Point(236,217));
	AddPatroll(13,14,1,1,Point(41,75),Point(60,127));
	AddPatroll(13,14,1,1,Point(71,119),Point(131,196));
end;