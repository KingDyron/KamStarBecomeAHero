

{$EVENT evtBeacon:VillOnBeacon}

procedure OnTaskCompleted(aAddHouses : Integer; aWares,aCount : array of Integer; DeliveryOn : Boolean);
var I ,aVill : integer;
begin
	aVill := QuestNow.QVVillageType;
	
	VillageQuestGiver[aVill].QEventType := VillageQuestGiver[aVill].QEventType + 1;
	VillageQuestGiver[aVill].QEndTime := States.GameTime+NextQuestTime;
	
	QuestNow.QVOnQuest := false;
	QuestNow.QVVillageType := -1;
	HousesToBuild[6] := HousesToBuild[6]+aAddHouses;
	
	VillageQuestGiver[aVill].DTrue := DeliveryOn;
	
	If length(aWares) > 0 then 
		for I := low(aWares) to High(aWares) do
			A.GiveWares(0,aWares[I],aCount[I]);
	
	for I := 0 to high(QuestTasks[aVill]) do
		QuestTasks[aVill][I] := false;
end;
procedure AcceptTask(aVill,aQVNow : Integer);
var I : Integer;
begin
	If aVill = 4 then 
		Exit;
	case aVill of
		0:	Case aQVNow of
				2:;
				end;
		1: 	Case aQVNow of
				2: 	begin			
						MinersToTrain := 12;
						MinersKilled := 12;
					end;
			end;
		2:	Case aQVNow of
				2: 	begin
						A.GiveHouseSite(13,7,117,118,true);
						A.GiveHouseSite(13,16,118,127,true);
						A.GiveHouseSite(13,22,130,125,true);
						A.GiveHouseSite(13,24,121,118,true);				
					end;
				8: 	begin
						QuestInteger[3] := 0;			
						QuestInteger[4] := 0;			
						QuestInteger[5] := 0;			
					end;
			end;
		3: 	Case aQVNow of
				2: 	begin
						A.MapTileObjectSet(21,109,190 + States.KamRandomI(4))
						A.MapTileObjectSet(28,100,190 + States.KamRandomI(4))
						A.MapTileObjectSet(38,102,190 + States.KamRandomI(4))
						A.MapTileObjectSet(29,109,190 + States.KamRandomI(4))
						A.MapTileObjectSet(26,110,190 + States.KamRandomI(4))
					end;
			end;
		5: Case aQVNow of
				2:;
				14: begin
						CanSendArmy := true;
						QuestInteger[0] := 0;
					end;
				17:	GroupHpInvulnerableSet(States.PlayerGetAllGroups(10),false);
				//for I := 0 to high(Patrolls) do 
					//	If States.GroupOwner(Patrolls[I].aID) = 10 then 
					//		GroupHpInvulnerableSet([Patrolls[I].aID],false);
			end;
	end;
	
	for I := 0 to high(QuestTasks[aVill]) do
		QuestTasks[aVill][I] := false;
end;
procedure AbandonTask(aVill,aQVNow : Integer);
var I : Integer;
begin
	If aVill = 4 then 
		Exit;
	case aVill of
		0:	Case aQVNow of
				2: 	begin
					end;
				end;
		1: 	Case aQVNow of
				2: 	begin			
						MinersToTrain := 0;
						MinersKilled := 0;
					end;
			end;
		2:	Case aQVNow of
				2: 	begin	
						A.HouseDestroy(States.HouseAt(117,118),true);
						A.HouseDestroy(States.HouseAt(118,127),true);
						A.HouseDestroy(States.HouseAt(130,125),true);
						A.HouseDestroy(States.HouseAt(121,118),true);
					end;
				5: 	begin	
						QuestInteger[5] := 0;
					end;
			end;
		3: 	Case aQVNow of
				2: 	begin
						TreesToChop := 0;
					end;
			end;
		5: Case aQVNow of
				14: begin	
						CanSendArmy := false;		
					end;
				16:	begin
						for I := 0 to high(Patrolls) do 
							If States.GroupOwner(Patrolls[I].aID) = 10 then
							begin
								GroupHpInvulnerableSet([Patrolls[I].aID],false);
								A.GroupKillAll(Patrolls[I].aID,true);
							end;
					
						AddPatroll(10,22,6,3,Point(76,92),Point(180,92));
						AddPatroll(10,22,6,3,Point(137,60),Point(132,147));
						AddPatroll(10,22,4,2,Point(12,61),Point(56,74));
					end;
			end;
	end;
	VillageQuestGiver[aVill].QEndTime := States.GameTime + 2400;
	VillageQuestGiver[aVill].QEventType := VillageQuestGiver[aVill].QEventType - 2;
	
	QuestNow.QVVillageType := - 1;
	QuestNow.QVOnQuest := false;
	for I := 0 to high(QuestTasks[aVill]) do
		QuestTasks[aVill][I] := false;
	A.ShowMSG(0, '<$653>');
end;

Procedure VillOnBeacon(aPlayer, X,Y : Integer);
begin
	If InCinematic then 
	begin
		If QuestNow.QVVillageType <> -1 then 
			If U.KMPoint(X,Y) = States.UnitPosition(VillageQuestGiver[QuestNow.QVVillageType].QGiver) then
			begin
				If FirstTaskTime = 0 then 
					FirstTaskTime := States.GameTime + 600;
				StartCinematic(1,0);
				
				SetNewMultiMessages([602 + States.KaMRandomI(3)],70,[],[]);
				VillageQuestGiver[QuestNow.QVVillageType].QEventType := VillageQuestGiver[QuestNow.QVVillageType].QEventType+1;
				AcceptTask(QuestNow.QVVillageType, VillageQuestGiver[QuestNow.QVVillageType].QEventType);
				VillageQuestGiver[QuestNow.QVVillageType].QTime := States.GameTime;
			end else
			If U.KMPoint(X,Y) = aHeroPos then
			begin
				QuestNow.QVOnQuest := false;
				SetNewMultiMessages([605 + States.KaMRandomI(3)],70,[],[]);
				StartCinematic(1,0);
				VillageQuestGiver[QuestNow.QVVillageType].QEventType := VillageQuestGiver[QuestNow.QVVillageType].QEventType-1;
				VillageQuestGiver[QuestNow.QVVillageType].QEndTime := States.GameTime + 1200;
				QuestNow.QVVillageType := -1;
			end;
			
	end else 
	If QuestNow.QVVillageType <> -1 then 
		If U.KMPoint(X,Y) = States.UnitPosition(VillageQuestGiver[QuestNow.QVVillageType].QGiver) then
			AbandonTask(QuestNow.QVVillageType, VillageQuestGiver[QuestNow.QVVillageType].QEventType);
end;

Procedure OnUnitTrainedCoalVillage(aUnit : Integer);
var aPos : TKMPoint;
begin	
	If VillageQuestGiver[1].QEventType = 2 then 
		If MinersToTrain <> 0 then 
			If States.UnitType(aUnit) = 2 then 
			begin
				aPos:=States.UnitPosition(aUnit);
				Actions.UnitOrderWalk(Actions.GiveUnit(13,2,aPos.X,aPos.Y+2,4),234,226);
				A.UnitKill(aUnit,true);
				MinersToTrain := MinersToTrain-1;
			end;
end;

Procedure OnHouseBuiltCornVillage(aHouse:Integer);
var aPos : TKMPoint;
	aOwner : Integer;
begin
	aOwner := States.HouseOwner(aHouse);
	If aOwner = 13 then 
	begin
		CornVillageHousesBuilt := CornVillageHousesBuilt + 1;
		Actions.GiveUnit(13,States.HouseTypeToOccupantType(States.HouseType(aHouse)),States.HousePositionX(aHouse),States.HousePositionY(aHouse)+2,4);
		If CornVillageHousesBuilt = 4 then 
		begin	
			CornVillageHousesBuilt := 0;
			Actions.ShowMSG(0,'<$629>');
			QuestTasks[2][0] := true;	
		end;
	//A.ShowMsG(0,'Built : ' + States.HouseTypeName(States.HouseType(aHouse)) );
	end;
	If VillageQuestGiver[2].QEventType = 8 then 
		IF aOwner = 0 then 
		begin
			aPos := States.HousePosition(aHouse);			
			If U.InAreaI(aPos.X,aPos.Y,107,114,133,134) then 
			begin				
				CornVillageHousesBuilt := CornVillageHousesBuilt + 1;
				HouseDestroyedByScript := True;
				A.HouseDestroy(aHouse,true);
				A.GiveHouse(13,28,aPos.X,aPos.Y);
				Actions.GiveUnit(13,States.HouseTypeToOccupantType(States.HouseType(aHouse)),States.HousePositionX(aHouse),States.HousePositionY(aHouse)+2,4);
				If CornVillageHousesBuilt = 2 then 
				begin	
					CornVillageHousesBuilt := 0;
					QuestTasks[2][0] := true;
					If QuestTasks[2][1] and QuestTasks[2][0] then
						A.ShowMSG(0, '<$629>');	
				end;
			end;
		end;
end;

Procedure OnTickFishVillage;
begin
	If VillageQuestGiver[0].QEventType = 1 then 
	begin
		If States.GameTime = VillageQuestGiver[0].QTime + 10 then
			SetNewMultiMessages([600, 601],90,[],[]);
			
		//If States.GameTime = VillageQuestGiver[0].QTime + 50 then 
		//	StartCinematic(1,0);
		//first quest
	end;
	
	If VillageQuestGiver[0].QEventType = 2 then 
		If States.GameTime > VillageQuestGiver[0].QTime + 200 then 
			If States.GameTime mod 100 = 0 then 
				begin
					If aHeroPos = VillageQuestGiver[0].QPos then 
					begin
						If States.GameTime > MessageDelay then 
							If not QuestTasks[0][0] and not QuestTasks[0][1] then
							begin
								Actions.ShowMSG(0,'<$608>');
								MessageDelay := States.GameTime + 1200;
							end;
							
						If QuestTasks[0][0] and QuestTasks[0][1] then
						begin	
							Actions.ShowMSG(0,'<$609>');
							OnTaskCompleted(2,[7],[23],true);
						end;
						
					end;
					If not QuestTasks[0][0] then
						If aHeroPos = VillageQuestGiver[3].QPos then 
						begin
							If QuestTasks[0][0] then
								SetNewMultiMessages([610,611,614],70,[],[])
							else
								SetNewMultiMessages([610,611],70,[],[]);
								
							QuestTasks[0][0] := true;		
						end;
					
					If not QuestTasks[0][1] then	
						If aHeroPos = VillageQuestGiver[2].QPos then 
						begin
							If QuestTasks[0][0] then
								SetNewMultiMessages([612,613,614],70,[],[])
							else
								SetNewMultiMessages([612,613],70,[],[]);
								
							QuestTasks[0][1] := true;				
						end;
				end;
	//Building Houses
	If VillageQuestGiver[0].QEventType = 3 then 
		If States.GameTime = VillageQuestGiver[0].QEndTime - 600 then
			GiveHouseMultipleTimes(13,6, true,true,[Point(160,234),Point(150,234),Point(134,230)],Point(143,243));
end;

Procedure OnTickCoalVillage;
var aUnit, aX,aY, I : Integer;
begin
	If VillageQuestGiver[1].QEventType = 1 then 
		If States.GameTime = VillageQuestGiver[1].QTime + 10 then
			SetNewMultiMessages([615,616,617,618,619, 601],70,[],[]);
		
	//If States.GameTime = VillageQuestGiver[1].QTime + 50 then 
	//	StartCinematic(1,0);
	//first quest
	
	If VillageQuestGiver[1].QEventType = 2 then 
		If States.GameTime > VillageQuestGiver[1].QTime + 200 then 
			If States.GameTime mod 100 = 0 then 
			begin
				If aHeroPos = VillageQuestGiver[1].QPos then 
				begin
					If States.GameTime > MessageDelay then 
						If not QuestTasks[1][0] then
						begin
							Actions.ShowMSG(0,'<$620>');
							MessageDelay := States.GameTime + 1200;
						end;
					If QuestTasks[1][0] then
					begin						
						Actions.ShowMSG(0,'<$621>');
						OnTaskCompleted(3,[],[],false);
						A.PlanAddHouse(5,15,209,104);
						A.PlanAddHouse(5,15,224,102);
						A.PlanConnectRoad(5,224,103,224,106,false);
						QuestNow.QVOnQuest := false;
					end;
				end;
				for aX := 0 to 2 do
					for aY := 0 to 2 do
					begin
						aUnit := States.UnitAt(234-1+aX,226-1+aY);
						If States.UnitOwner(aUnit) = 13 then
							If States.UnitType(aUnit) = 2 then
							begin
								Actions.UnitKill(aUnit,true);
								MinersKilled := MinersKilled-1;
							end;
					end;
				If MinersKilled = 0 then 
				begin
					MinersKilled := -1;
					QuestTasks[1][0] := true;
					A.ShowMSG(0,'<$628>');
				end;
			end;
		
	If States.GameTime mod 6000 = 0 then 
		If QuestTasks[1][0] and (VillageQuestGiver[1].QEventType >= 2) then
		begin	
			Actions.GiveWares(4,7,10);
			Actions.GiveWares(4,5,30);
			Actions.GiveWares(5,5,30);
		end;

	//vagabonds
	If VillageQuestGiver[1].QEventType = 4 then 
		If States.GameTime = VillageQuestGiver[1].QTime + 10 then 	
			SetNewMultiMessages([622,623,624,625,626,627,601],70,[],[]);
			
	If VillageQuestGiver[1].QEventType = 5 then 
	begin
			
		If States.GameTime = VillageQuestGiver[1].QTime + 100 then 
		begin
			QuestInteger[0] := A.GiveGroup(11,27,255,132,4,1,1);
			QuestInteger[1] := A.GiveGroup(11,27,254,132,4,1,1);
			QuestInteger[2] := A.GiveGroup(11,27,253,132,4,1,1);
			QuestInteger[3] := A.GiveGroup(11,27,252,132,4,1,1);
			A.GroupOrderWalk(QuestInteger[0],233,227,2);
			A.GroupOrderWalk(QuestInteger[1],230,223,2);
			A.GroupOrderWalk(QuestInteger[2],236,217,0);
			A.GroupOrderWalk(QuestInteger[3],245,211,0);
		end;
		
		If States.GameTime = VillageQuestGiver[1].QTime + 1200 then 
			If States.GroupAt(233,227) = QuestInteger[0] then 
			begin
				for I := 0 to 3 do
					A.GroupKillAll(QuestInteger[I],true);
				VillageQuestGiver[1].QEventType := 3;
				VillageQuestGiver[1].QEndTime := States.GameTime+1200;
				A.ShowMSG(0, '<$634>');
				QuestNow.QVOnQuest := false;
			end;
		
		If not QuestTasks[1][1] then
		If States.GameTime > VillageQuestGiver[1].QTime + 100 then 
			If States.GameTime < VillageQuestGiver[1].QTime + 1200 then 
				If States.GroupDead(QuestInteger[0]) and 
				 States.GroupDead(QuestInteger[1]) and 
				 States.GroupDead(QuestInteger[2]) and 
				 States.GroupDead(QuestInteger[3]) then 
				begin
					A.ShowMSG(0,'<$628>');
					QuestTasks[1][1] := true;
				end;
			
		If QuestTasks[1][1] then
			If aHeroPos = VillageQuestGiver[1].QPos then 
			begin
				SetNewMultiMessages([636,637],70,[],[]);
				OnTaskCompleted(2,[5],[200],false);
			end;
	end;
end;

Procedure OnTickCornVillage;
begin
	If VillageQuestGiver[2].QEventType = 1 then 
		If States.GameTime = VillageQuestGiver[2].QTime + 10 then
			SetNewMultiMessages([638, 601],70,[],[]);

	If VillageQuestGiver[2].QEventType = 2 then 
	begin
		If States.GameTime = VillageQuestGiver[2].QTime + 40 then 
			A.ShowMSG(0,'<$639>');
		If States.GameTime = VillageQuestGiver[2].QTime + 50 then 
		begin	
			A.GiveHouseSite(13,7,117,118,true);
			A.GiveHouseSite(13,16,118,127,true);
			A.GiveHouseSite(13,22,130,125,true);
			A.GiveHouseSite(13,24,121,118,true);
		end;
		If States.GameTime = VillageQuestGiver[2].QTime + 250 then 
		begin
			A.GiveHouseSite(13,7,117,118,true);
			A.GiveHouseSite(13,16,118,127,true);
			A.GiveHouseSite(13,22,130,125,true);
			A.GiveHouseSite(13,24,121,118,true);
		end;
		If States.GameTime = VillageQuestGiver[2].QTime + 500 then 
		begin	
			A.GiveHouseSite(13,7,117,118,true);
			A.GiveHouseSite(13,16,118,127,true);
			A.GiveHouseSite(13,22,130,125,true);
			A.GiveHouseSite(13,24,121,118,true);
		end;
		//first quest
		If States.GameTime > VillageQuestGiver[2].QTime + 200 then 
			If States.GameTime mod 100 = 0 then 
			begin
				If aHeroPos = VillageQuestGiver[2].QPos then 
				begin
					If States.GameTime > MessageDelay then 
						If not QuestTasks[2][0] then
						begin
							Actions.ShowMSG(0,'<$640>');
							MessageDelay := States.GameTime + 1200;
						end;
					If QuestTasks[2][0] then
					begin
						OnTaskCompleted(4,[9],[55],false);
						Actions.ShowMSG(0,'<$641>');
					end;
				end;
			end;
	end;
	//give corn fields
	If VillageQuestGiver[2].QEventType = 4 then 
		If States.GameTime = VillageQuestGiver[2].QTime + 10 then 
			SetNewMultiMessages([642, 601],70,[],[]);
		
	If VillageQuestGiver[2].QEventType = 5 then 
	begin			
		If States.GameTime = VillageQuestGiver[2].QTime + 40 then 
			Actions.ShowMSG(0,'<$643>');
		If States.GameTime mod 100 = 0 then 
			If aHeroPos = VillageQuestGiver[2].QPos then 
			begin		
					
				If States.GameTime > MessageDelay then 
					If not QuestTasks[2][1] then
					begin
						Actions.ShowMSG(0,'<$640>');
						MessageDelay := States.GameTime + 1200;
					end;
					
				If QuestTasks[2][1] = true then 
				begin
					OnTaskCompleted(3,[9,7,8,13],[31,12,24,17],false);
					Actions.ShowMSG(0,'<$644>');
				end;
			end;
	end;
	//give corn vine fields
	If VillageQuestGiver[2].QEventType = 7 then 
		If States.GameTime = VillageQuestGiver[2].QTime + 10 then 
			SetNewMultiMessages([691, 601],70,[],[]);
		
	If VillageQuestGiver[2].QEventType = 8 then 
	begin			
		If States.GameTime = VillageQuestGiver[2].QTime + 40 then 
			Actions.ShowMSG(0,'<$692>');
		If States.GameTime mod 100 = 0 then 
			If aHeroPos = VillageQuestGiver[2].QPos then 
			begin		
					
				If States.GameTime > MessageDelay then 
					If not QuestTasks[2][1] then
					begin
						Actions.ShowMSG(0,'<$640>');
						MessageDelay := States.GameTime + 1200;
					end;
					
				If QuestTasks[2][1] and QuestTasks[2][0] then 
				begin
					OnTaskCompleted(3,[],[],true);
					Actions.ShowMSG(0,'<$693>');
				end;
			end;
	end;
end;

Procedure OnTickWoodVillage;
begin			
	if VillageQuestGiver[3].QEventType = 1 then 
		If States.GameTime = VillageQuestGiver[3].QTime + 10 then
			SetNewMultiMessages([645,646,647,648, 601],70,[],[]);

		
	//first quest
	
	if VillageQuestGiver[3].QEventType = 2 then
	begin
		If States.GameTime > VillageQuestGiver[3].QTime + 200 then 
			If States.GameTime mod 100 = 0 then 
				If aHeroPos = VillageQuestGiver[3].QPos then 
				begin
					If States.GameTime > MessageDelay then 
						If not QuestTasks[3][0] then
						begin
							Actions.ShowMSG(0,'<$649>');
							MessageDelay := States.GameTime + 1200;
						end;
					If QuestTasks[3][0] then
					begin
						OnTaskCompleted(4,[],[],false);
						Actions.ShowMSG(0,'<$650>');
					end;
				end;
		If QuestNow.QVOnQuest and not QuestTasks[3][0] then 
		begin
			If States.GameTime > TreesToTime then 
				If States.GameTime mod 100 = 0 then 
				begin
					If U.InAreaI(aHeroPos.X,aHeroPos.Y,10,65,44,120) then 
						If U.InRangeI(States.MapTileObject(aHeroPos.X,aHeroPos.Y),190,194) then 
						begin
							A.ShowMSG(0,'<$651>')
							TreesToTime := States.GameTime + 200;
						end;
					
				end;
			If States.GameTime = TreesToTime then 		
			begin
				If U.InAreaI(aHeroPos.X,aHeroPos.Y,10,65,44,120) then 
					If U.InRangeI(States.MapTileObject(aHeroPos.X,aHeroPos.Y),190,194) then 
					begin
						A.ShowMSG(0,'<$90>')
						TreesToChop := TreesToChop + 1;
						Actions.MapTileObjectSet(aHeroPos.X,aHeroPos.Y,255);
						If TreesToChop = 5 then 
						begin
							A.ShowMSG(0,'<$630>');						
							QuestTasks[3][0] := true;
						end;
					end;
			end;
		end;
	end;
end;

Procedure OnTickBarracksVillage;
var I : Integer;
begin
	
	If States.GameTime mod BarrackVillageHelp.aMod = 0 then 
		If BarrackVillageHelp.Added then 
			begin
				If BarrackVillageHelp.ToPlayer = 0 then 
					BarrackVillageHelp.ToPlayer := 6 
				else
					BarrackVillageHelp.ToPlayer := 0;
					
				A.GroupOrderWalk(A.GiveGroup(BarrackVillageHelp.ToPlayer, BarrackVillageHelp.aType, 61,125,0, BarrackVillageHelp.aCount, 3),81,170,4);
			end;
	//check what happened with patrols
	if VillageQuestGiver[5].QEventType = 1 then 
		If States.GameTime = VillageQuestGiver[5].QTime + 10 then
			SetNewMultiMessages([655,656,657,658, 601],70,[],[]);

		
	//first quest	
	if VillageQuestGiver[5].QEventType = 2 then
	begin
		If States.GameTime = VillageQuestGiver[5].QTime + 100 then 
			A.ShowMSG(0,'<$672>');
		If States.GameTime mod 100 = 0 then 
		begin
			
			If not QuestTasks[5][0] then 
				If  PosInRadius(aHeroPos, Point(142,126), 1) then
				begin
					QuestTasks[5][0] := true;
					A.ShowMSG(0, '<$659>');	
				end;
			If QuestTasks[5][0] and not QuestTasks[5][1] then 
				If  PosInRadius(aHeroPos, Point(140,119), 2) then
				begin
					QuestTasks[5][1] := true;	
					A.ShowMSG(0, '<$660>');	
					A.ShowMSG(0, '<$631>');		
				end;
				
			If  PosInRadius(aHeroPos, VillageQuestGiver[5].QPos, 0) then
				If QuestTasks[5][0] and QuestTasks[5][1] then 
				begin
					SetNewMultiMessages([662,663,664,665,666,667,668,669,670,671],70,[],[]);
					
					OnTaskCompleted(0,[],[],false);
					
					BarrackVillageHelp.Added := true;
					BarrackVillageHelp.aCount := 1;
					BarrackVillageHelp.aType := 14;
				end else
				If States.GameTime > MessageDelay then 
				begin
					MessageDelay := States.GameTime + 1200;
					A.ShowMSG(0, '<$661>');	
				end;		
					
		end;
	end;
	
	//just a conversation
	if VillageQuestGiver[5].QEventType = 4 then
		If States.GameTime = VillageQuestGiver[5].QTime + 10 then
			SetNewMultiMessages([673, 601],70,[],[]);
		
	if VillageQuestGiver[5].QEventType = 5 then
	begin
		If States.GameTime = VillageQuestGiver[5].QTime + 10 then
		begin
			StartCinematic(0,0);
			StartCinematic(1,0);
			BarrackVillageHelp.aType := 15;
			SetNewMultiMessages([674,675,676,677,678,679,680,681,682,683],70,[],[]);
			OnTaskCompleted(0,[],[],false);
		end;	
	end;
	
	if VillageQuestGiver[5].QEventType = 6 then
		If States.GameTime = VillageQuestGiver[5].QTime + 800 then 
			GiveHouseMultipleTimes(9,17, true,false,[Point(92,141),Point(100,153)],Point(0,0));
	
	//check garrisons
	if VillageQuestGiver[5].QEventType = 7 then 
			If States.GameTime = VillageQuestGiver[5].QTime + 10 then
				SetNewMultiMessages([694, 601],70,[],[]);

			
	if VillageQuestGiver[5].QEventType = 8 then
	begin
		If States.GameTime = VillageQuestGiver[5].QTime + 100 then 
				SetNewMultiMessages([695,696,697,698,699,700,701,702,703,704,705],70,[],[]);
			
		If States.GameTime mod 100 = 0 then 
		begin			
			If not QuestTasks[5][0] then 
				If  PosInRadius(aHeroPos, Point(15,57), 3) then
				begin
					QuestTasks[5][0] := true;
					SetNewMultiMessages([706,707],70,[57],[]);
				end;
			If QuestTasks[5][0] and not QuestTasks[5][1] then 
				If  PosInRadius(aHeroPos, Point(200,15), 3) then
				begin
					QuestTasks[5][1] := true;	
					SetNewMultiMessages([708],70,[],[]);
					A.ShowMSG(0, '<$631>');		
				end;
				
			If  PosInRadius(aHeroPos, VillageQuestGiver[5].QPos, 0) then
				If QuestTasks[5][0] and QuestTasks[5][1] then 
				begin
					SetNewMultiMessages([709,710,711,712,713,714,715],70,[],[]);
					
					OnTaskCompleted(0,[],[],false);
					
					BarrackVillageHelp.aCount := 2;
					BarrackVillageHelp.aType := 17;
					BarrackVillageHelp.Added := true;
					
				end else
				If States.GameTime > MessageDelay then 
				begin
					MessageDelay := States.GameTime + 1200;
					A.ShowMSG(0, '<$661>');	
				end;
					
		end;
	end;
	
	//check way to prison
	if VillageQuestGiver[5].QEventType = 10 then 
			If States.GameTime = VillageQuestGiver[5].QTime + 10 then
				SetNewMultiMessages([716, 601],70,[],[]);

		
	if VillageQuestGiver[5].QEventType = 11 then
	begin
		If States.GameTime = VillageQuestGiver[5].QTime + 100 then 
			SetNewMultiMessages([717,718],70,[],[]);
			
		If States.GameTime mod 100 = 0 then 
		begin
			If not QuestTasks[5][0] then 
				If  PosInRadius(aHeroPos, Point(114,53), 3) then
				begin
					QuestTasks[5][0] := true;
					A.ShowMSG(0, '<$719>');	
				end;
			If QuestTasks[5][0] and not QuestTasks[5][1] then 
				If  PosInRadius(aHeroPos, Point(113,45), 2) then
				begin
					QuestTasks[5][1] := true;	
					A.ShowMSG(0, '<$720>');	
					A.ShowMSG(0, '<$631>');		
				end;
				
			If  PosInRadius(aHeroPos, VillageQuestGiver[5].QPos, 0) then
				If QuestTasks[5][0] then 
				begin
					SetNewMultiMessages([721,722,723,724],70,[],[]);
					
					OnTaskCompleted(0,[],[],false);
					
					BarrackVillageHelp.aCount := 4;
					BarrackVillageHelp.aType := 27;
					GiveHouseMultipleTimes(9,17, true,false,[Point(94,148)],Point(0,0));
					BarrackVillageHelp.aMod := 5000;
					BarrackVillageHelp.Added := true;
				end else
				If States.GameTime > MessageDelay then 
				begin
					MessageDelay := States.GameTime + 1200;
					A.ShowMSG(0, '<$661>');	
				end;		
					
		end;
	end;

	//send army 
	if VillageQuestGiver[5].QEventType = 13 then 
			If States.GameTime = VillageQuestGiver[5].QTime + 10 then
				SetNewMultiMessages([726, 601],70,[],[]);
				
	if VillageQuestGiver[5].QEventType = 14 then
	begin
		If States.GameTime = VillageQuestGiver[5].QTime + 100 then 
			SetNewMultiMessages([727,728,729,730,731],70,[],[]);
			
		If States.GameTime mod 100 = 0 then 
		begin
			If  PosInRadius(aHeroPos, VillageQuestGiver[5].QPos, 0) then
				If QuestTasks[5][0] then 
				begin
					SetNewMultiMessages([732,733,734,735],70,[],[]);
					
					OnTaskCompleted(0,[],[],false);
					
					BarrackVillageHelp.aCount := 6;
					BarrackVillageHelp.aType := 21;
					GiveHouseMultipleTimes(9,17, true,false,[Point(94,148)],Point(0,0));
					
					BarrackVillageHelp.aMod := 5000;
					BarrackVillageHelp.Added := true;
					
					AddPatroll(10,22,16,4,Point(76,92),Point(180,92));
					AddPatroll(10,22,12,4,Point(137,60),Point(132,147));
					AddPatroll(10,22,9,2,Point(12,61),Point(56,74));
					CanSendArmy := false;
					
				end else
				If States.GameTime > MessageDelay then 
				begin
					MessageDelay := States.GameTime + 1200;
					A.ShowMSG(0, '<$661>');	
				end;		
					
		end;
	end;	
	//Kill patrols
	if VillageQuestGiver[5].QEventType = 16 then 
			If States.GameTime = VillageQuestGiver[5].QTime + 10 then
				SetNewMultiMessages([736, 601],70,[],[]);
				
	if VillageQuestGiver[5].QEventType = 17 then
	begin
		If States.GameTime = VillageQuestGiver[5].QTime + 100 then 
			SetNewMultiMessages([737,738,739,740,741],70,[],[]);
			
		If States.GameTime mod 100 = 0 then 
		begin
			If not QuestTasks[5][0] then 
			begin
				QuestTasks[5][0] := true;
				for I := 0 to high(Patrolls) do	
					If States.GroupOwner(Patrolls[I].aID) = 10 then 
						If not States.GroupDead(Patrolls[I].aID) then 
							QuestTasks[5][0] := false;
				If QuestTasks[5][0] then 
					A.ShowMSG(0, '<$631>');		
					
			end;
			If  PosInRadius(aHeroPos, VillageQuestGiver[5].QPos, 0) then
				If QuestTasks[5][0] then 
				begin
					SetNewMultiMessages([742,743,744],70,[],[]);
					
					OnTaskCompleted(0,[],[],false);
					
					BarrackVillageHelp.aCount := 6;
					BarrackVillageHelp.aType := 20;
					GiveHouseMultipleTimes(9,17, true,false,[Point(94,148)],Point(0,0));
					
					BarrackVillageHelp.aMod := 4500;
					BarrackVillageHelp.Added := true;
					
					VillageQuestGiver[5].QEndTime := States.GameTime + 1200;

					A.AIDefencePositionRemove(7,61,65);
					A.AIDefencePositionRemove(7,77,64);
					A.AIDefencePositionRemove(7,67,64);
					A.AIDefencePositionRemove(7,79,54);
					A.AIDefencePositionRemove(7,96,65);
					A.AIDefencePositionRemove(7,83,65);
					A.AIDefencePositionRemove(7,72,64);
				end else
				If States.GameTime > MessageDelay then 
				begin
					MessageDelay := States.GameTime + 1200;
					A.ShowMSG(0, '<$661>');	
				end;		
					
		end;
	end;
	//attack on the prison
	if VillageQuestGiver[5].QEventType = 19 then 
			If States.GameTime = VillageQuestGiver[5].QTime + 10 then
				SetNewMultiMessages([745, 601],70,[],[]);
				
	if VillageQuestGiver[5].QEventType = 20 then
	begin
		If States.GameTime = VillageQuestGiver[5].QTime + 100 then 
			SetNewMultiMessages([746,747],70,[],[]);
			
		If States.GameTime mod 100 = 0 then 
		begin
			If not QuestTasks[5][0] then 
				If  PosInRadius(aHeroPos, Point(114,46), 10) then
				begin
					QuestTasks[5][0] := true;
					A.ShowMSG(0, '<$719>');	
				end;
			If QuestTasks[5][0] and not QuestTasks[5][1] then 
				If  PosInRadius(aHeroPos, Point(112,42), 2) then
				begin
					QuestTasks[5][1] := true;	
					A.ShowMSG(0, 'You found them');	
					A.ShowMSG(0, '<$631>');	
					A.UnitOrderWalk(A.GiveUnit(13,0,112,41,4),27,128);
					A.UnitOrderWalk(A.GiveUnit(13,0,112,40,4),27,128);
					A.UnitOrderWalk(A.GiveUnit(13,0,113,41,4),27,128);
					A.UnitOrderWalk(A.GiveUnit(13,0,113,40,4),27,128);
					A.UnitOrderWalk(A.GiveUnit(13,0,114,40,4),27,128);
					A.UnitOrderWalk(A.GiveUnit(13,0,114,41,4),27,128);
					A.UnitOrderWalk(A.GiveUnit(13,0,112,39,4),27,128);
					A.UnitOrderWalk(A.GiveUnit(13,0,113,39,4),27,128);
					SetInvurnelabeUnits;
				end;
				
			If  PosInRadius(aHeroPos, VillageQuestGiver[5].QPos, 1) then
				If QuestTasks[5][0] then 
				begin
					SetNewMultiMessages([721,722,723,724],70,[],[]);
					
					OnTaskCompleted(0,[],[],false);
					
					BarrackVillageHelp.aCount := 8;
					GiveHouseMultipleTimes(9,17, true,false,[Point(94,148)],Point(0,0));
					
					BarrackVillageHelp.aMod := 4000;
					BarrackVillageHelp.Added := true;
					
				end else
				If States.GameTime > MessageDelay then 
				begin
					MessageDelay := States.GameTime + 1200;
					A.ShowMSG(0, '<$661>');	
				end;		
					
		end;
	end;
	
	
end;

Procedure OnTickPlayer7;
begin
		
	//first quest
	If States.GameTime > VillageQuestGiver[4].QTime + 200 then 
	begin
		If States.GameTime mod 100 = 0 then 
		begin
			If VillageQuestGiver[4].QEventType = 1 then 
			begin
				If PosInRadius(aHeroPos, VillageQuestGiver[4].QPos, 2) then	
				begin
					If States.GameTime > MessageDelay then 
						If not QuestTasks[4][0] then
						begin
							Actions.ShowMSG(0,'<$123>');
							MessageDelay := States.GameTime + 1200;
						end;
					If QuestTasks[4][0] then
					begin
						A.GiveWares(6,1,20);
						A.GiveWares(6,2,15);
						A.GiveWares(9,2,23);
						A.GiveWares(9,8,21);
						A.GiveWares(9,10,21);
						HousesToBuild[6] := HousesToBuild[6]+7;
						Actions.ShowMSG(0,'<$122>');
						VillageQuestGiver[4].QEventType := 2;
						VillageQuestGiver[4].QEndTime := States.GameTime+18000;
					end;
				end;
			end;
		end;
		If not QuestTasks[4][0] then
			If States.GameTime mod 100 = 0 then 
				If PosInRadius(aHeroPos, U.KMPoint(197,251), 1) then	
				begin
					QuestTasks[4][0] := true;
					A.ShowMSG(0,'<$124>')
				end;
				//If aHeroPos = U.KMPoint(197,251) then 
	end;
	
	//second quest
	If VillageQuestGiver[4].QEventType = 2 then 
		If States.GameTime > VillageQuestGiver[4].QEndTime  then 
		begin
			If States.GameTime = VillageQuestGiver[4].QEndTime + 100 then 
			begin
				Actions.ShowMSG(0,'<$133>');
				MessageDelay := States.GameTime + 3600;
			end;
			If States.GameTime mod 100 = 0 then 
			begin
				If States.GameTime > MessageDelay then 
					If not QuestTasks[4][1] then
					begin
						Actions.ShowMSG(0,'<$134>');
						MessageDelay := States.GameTime + 3600;
					end;
				If QuestTasks[4][1] then
				begin
					HousesToBuild[6] := HousesToBuild[6]+5;
					A.GiveWares(0,1,23);
					A.GiveWares(0,2,18);
					A.GiveWares(0,7,10);
					Actions.ShowMSG(0,'<$135>');
					VillageQuestGiver[4].QEventType := 3;
					VillageQuestGiver[4].QEndTime := States.GameTime+18000;
				end;
			end;
		end;
			
	//third quest
	If VillageQuestGiver[4].QEventType = 3 then 
		If States.GameTime > VillageQuestGiver[4].QEndTime  then 
		begin
			If States.GameTime = VillageQuestGiver[4].QEndTime + 100 then 
			begin
				Actions.ShowMSG(0,'<$136>');
				MessageDelay := States.GameTime + 3600;
			end;
			If States.GameTime mod 100 = 0 then 
			begin
				If States.GameTime > MessageDelay then 
					If not QuestTasks[4][1] then
					begin
						Actions.ShowMSG(0,'<$137>');
						MessageDelay := States.GameTime + 1200;
					end;
				If PosInRadius(aHeroPos, VillageQuestGiver[4].QPos, 1) 	or
					PosInRadius(aHeroPos, U.KMPoint(182,206), 1) 	then
						QuestTasks[4][2] := true;
					
				If QuestTasks[4][2] then
				begin
					HousesToBuild[6] := HousesToBuild[6]+3;
					SetNewMultiMessages([138,139,140,141,142],70,[],[]);
					GiveSpecialItem;
					VillageQuestGiver[4].QEventType := 4;
					VillageQuestGiver[4].QEndTime := States.GameTime + 6000;
				end;
			end;
		end;
	
end;

Procedure OnTickVillages;
var I, aHouseID, LEA : Integer;
	aHouses : array of integer;
	aSecPos,aToPos,aPos : TKMPoint;
begin
	OnTickFishVillage;
	OnTickCoalVillage;
	OnTickCornVillage;
	OnTickWoodVillage;
	OnTickBarracksVillage;
	OnTickPlayer7;
	If States.GameTime mod 10000 = 0 then 
		for I := 0 to 5 do 
			If VillageQuestGiver[I].DTrue then 
			begin	
				aSecPos := VillageQuestGiver[I].QPos;
				aToPos := U.KMPoint(51,208);
				VillageQuestGiver[I].DMan := Actions.GiveGroup(13,27,aSecPos.X,aSecPos.Y+2,4,1,1)
				Actions.GroupOrderWalk(VillageQuestGiver[I].DMan,aToPos.X,aToPos.Y+1,4);
			end;
			
	If States.GameTime mod 20 = 0 then 
		for I := 0 to 5 do 
			If VillageQuestGiver[I].DTrue then 
				If VillageQuestGiver[I].DMan > 0 then 
					If PosInRadius(States.UnitPosition(S.GroupMember(VillageQuestGiver[I].DMan,0)), U.KMPoint(51,208), 2) then 
					begin	
						GiveResourcesFromVillage(I);
						aSecPos := VillageQuestGiver[I].QPos;
						Actions.GroupOrderWalk(VillageQuestGiver[I].DMan,aSecPos.X,aSecPos.Y,4);
					end;
					
	If States.GameTime mod 20 = 0 then 
		for I := 0 to 5 do 
			If VillageQuestGiver[I].DTrue then 
				If VillageQuestGiver[I].DMan > 0 then 
				begin
					aPos := States.UnitPosition(S.GroupMember(VillageQuestGiver[I].DMan,0))
					aToPos := VillageQuestGiver[I].QPos;
					If PosInRadius(aPos, aToPos, 1) then 
					begin	
						Actions.GroupKillAll(VillageQuestGiver[I].DMan,true);
						VillageQuestGiver[I].DMan := 0;
					end;
				end;	
	
	for I := 0 to 5 do
		If I <> 4 then 
			If States.GameTime = VillageQuestGiver[I].QEndTime then 
				A.ShowMSG(0, '<$' + IntToStr(684 + I) + '>');

	//visiting villager
	If not QuestNow.QVOnQuest then 
	begin
		If States.GameTime mod 50 = 0 then 
			for I := 0 to 5 do
				If I <> 4 then
					If (VillageQuestGiver[I].QEndTime = 9999999) or (States.GameTime >VillageQuestGiver[I].QEndTime) then 
						If aHeroPos = VillageQuestGiver[I].QPos then 
						begin		
							VillageQuestGiver[I].QTime := States.GameTime;
							VillageQuestGiver[I].QEventType := VillageQuestGiver[I].QEventType+1;
							QuestNow.QVOnQuest := true;
							StartCinematic(0,0);
							MessageDelay := States.GameTime + 1200;
							QuestNow.QVVillageType := I;
							QuestNow.QVStartTime := States.GameTime + 50;
							//A.ShowMSG(0,'');
						end;
	end else
	begin
		If States.GameTime > MessageDelay2 then 
			If States.GameTime mod 50 = 0 then 
				for I := 0 to 5 do
					If (I <> 4) and (I <> QuestNow.QVVillageType) then
						If not U.ArrayHasElementI(I,[2,3]) and not(VillageQuestGiver[0].QEventType <> 2) then 
							If (VillageQuestGiver[I].QEndTime = 9999999) or (States.GameTime >VillageQuestGiver[I].QEndTime) then 
								If aHeroPos = VillageQuestGiver[I].QPos then 
								begin
									A.ShowMSG(0, '<$'+IntToStr(106+I) + '>');
									MessageDelay2 := States.GameTime + 600;
								end;

	end;	

	If QuestNow.QVOnQuest then 
		If States.GameTime mod 5 = 0 then 
			If VillageQuestGiver[2].QEventType = 2 then 
				If States.HouseAt(States.UnitPositionX(Hero),States.UnitPositionY(Hero)-1) > 0 then 
				begin
					aHouseID := States.HouseAt(States.UnitPositionX(Hero),States.UnitPositionY(Hero)-1);
					//for I := 0 to 5 do 
					If S.HouseBuildingProgress(aHouseID) < S.HouseTypeMaxHealth(States.HouseType(aHouseID)) then 
						Actions.HouseAddBuildingProgress(aHouseID);
				end;
				
	If VillageQuestGiver[3].QEndTime <> 9999999 then 
		If VillageQuestGiver[3].QEventType = 3 then 
			If States.GameTime mod 20 = 0 then 
				If States.GameTime < VillageQuestGiver[3].QEndTime - NextQuestTime + 6000 then 
					begin
						aHouses := States.PlayerGetAllHouses(0);
						for LEA := 0 to high(aHouses) do	
							If States.HouseSiteIsDigged(aHouses[LEA]) and not (S.HouseIsComplete(aHouses[LEA])) then 
							begin
								A.HouseAddBuildingProgress(aHouses[LEA]);
								A.HouseAddBuildingProgress(aHouses[LEA]);
								A.HouseAddBuildingProgress(aHouses[LEA]);
								A.HouseAddBuildingProgress(aHouses[LEA]);
							end;
					end;
		
	If States.GameTime = 10 then 
	begin
		VillageQuestGiver[0].QGiver := 	A.GiveUnit(13,8,148,240,4);//fisherman
		VillageQuestGiver[1].QGiver :=	A.GiveUnit(13,2,241,225,4);//coal
		VillageQuestGiver[2].QGiver := 	A.GiveUnit(13,4,125,121,4);//corn
		VillageQuestGiver[3].QGiver := 	A.GiveUnit(13,1,57,107,4);//woodcutter
		VillageQuestGiver[5].QGiver := 	A.GiveUnit(13,13,53,127,4);//barracks

		for I := 0 to 5 do
		begin
			VillageQuestGiver[I].QPos := U.KMPoint(States.UnitPositionX(VillageQuestGiver[I].QGiver),States.UnitPositionY(VillageQuestGiver[I].QGiver)+2); 
		end;
		VillageQuestGiver[4].QPos := U.KMPoint(190,205);
	end;
	
	If CheckTime(FirstTaskTime) then 
		A.ShowMSG(0, '<$654>');
end;

Procedure OnMissionStartVillages;
var I : Integer;
begin	
	BarrackVillageHelp.aMod := 6000;
	VillageQuestGiver[5].QEventType := 12; 		
	for I := 0 to 5 do
	begin
		VillageQuestGiver[I].QEndTime := 9999999;
		VillageQuestGiver[I].QTime := 9999999;
	end;
	VillageQuestGiver[0].DTrue := true;
end;



{
Village quest legend

///fisherman
VillageQuestGiver[0].QEventType = 1 - quest to go to other villages


///coal
VillageQuestGiver[1].QEventType = 1 - quest to train a miners

///corn
VillageQuestGiver[2].QEventType = 1 - quest to build some buildings
VillageQuestGiver[2].QEventType = 3 - quest to build some fields


///wood
VillageQuestGiver[3].QEventType = 1 - quest to cut some trees

///player 7
VillageQuestGiver[4].QEventType = 1 - quest to cut some trees
VillageQuestGiver[4].QEventType = 2 - put some road plans

///barracks
VillageQuestGiver[5].QEventType = 1 -


}